  How to use CMake with CrysFML in Windows environments
  =====================================================

 - Download CMake 2.8 for Windows and install it in a directory without blancs
   (to be compatible with all kind of compilers), e.g. c:\CMake2.8

 - Do not put the CMake directories in the general PATH (see below)

 - Download nmake utility from Microsoft (or from Microsoft Visual Studio directory
   if it is installed) and copy it into the bin directory of CMake, e.g. c:\CMake2.8\bin

 - Create a link in the desktop to the program c:\Windows\system32\cmd.exe
   (or to C:\Windows\SysWOW64\cmd.exe) and modify the properties in order
   to be able to have large buffers for lines, quick edit mode, appropriate colours, etc.
   For ifort 32 bits:
    C:\Windows\System32\cmd.exe /E:ON /V:ON /K ""C:\Program Files (x86)\Intel\Composer XE 2011 SP1\bin\ipsxe-comp-vars.bat" ia32 vs2010"
   For ifort 64 bits:
    C:\Windows\System32\cmd.exe /E:ON /V:ON /K ""C:\Program Files (x86)\Intel\Composer XE 2011 SP1\bin\ipsxe-comp-vars.bat" intel64 vs2010"

 - For gfortran and g95, it is interesting (in order to avoid missbehaviour) to create a
   BAT file defining the correct environment for running the compiler and CMake.
   For instance you can create a file in c:\CrysFML (no need to commit it to the repository!)
   called "gfortran_vars.bat" with the following content:

    @echo off
    set PATH=c:\gfortran\bin;C:\CMake2.8\bin;%PATH%
    set LIB=c:\gfortran\lib;%LIB%
    set INCLUDE=c:\gfortran\include;%INCLUDE%
    echo "This terminal is adequate for running gfortran and CMake"

  - Modify the properties of the link to cmd.exe by writing in the target box:

     C:\Windows\System32\cmd.exe /K "c:\CrysFML\gfortran_vars"

 - Read the README file for general details on CMake for Windows and Linux

 - Create a directory: Build in the place of your choice. One can create other directories
   inside it for different kinds of build. Examples
    c:\CrysFML\Build\ifort_production
    c:\CrysFML\Build\ifort_debug
    c:\CrysFML\Build\ifort_64_production
    c:\CrysFML\Build\ifort_64_debug
    c:\CrysFML\Build\gfortran_production
    c:\CrysFML\Build\gfortran_debug
   .....................


 - Go to the appropriate subdirectory of the Build directory and execute a command of the type:
   cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D GUI=ON         ..\..\.
                 ^                       ^                        ^               ^
       Generator of OS dependent        Specify compiler   Kind of library     root CrysFML directory
         makefiles
                                                                     CMakeLists.txt
   Concrete examples (by default the compiler is ifort):


----------------------Good one for release
cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D GUI=ON -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=%CRYSFML%\ifort -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ..\..\.
--------------------------------------------
cmake -G "NMake Makefiles"  -D GUI=ON -D CMAKE_BUILD_TYPE=Debug   -D CMAKE_INSTALL_PREFIX=%CRYSFML%\ifort_debug   -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ..\..\.

To be run in an environment with intel 64bits:
-----------------------------------------------------------------------OK for release
cmake -G "NMake Makefiles"  -D GUI=ON -D ARCH32=OFF -D CMAKE_INSTALL_PREFIX=%CRYSFML%\ifort64 -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ..\..\.
cmake -G "NMake Makefiles"  -D GUI=ON -D ARCH32=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=%CRYSFML%\ifort64_debug -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ..\..\.
cmake -G "NMake Makefiles"  -D GUI=ON -D ARCH32=OFF -D CMAKE_BUILD_TYPE=Debug -DCMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%CRYSFML%\ifort64_debug -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ..\..\.
-----------------------------------------------------------------------OK for debug
WARNING: When you get in troubles you have to remove completely all files and directories created by cmake in c:\CrysFML\Build\ifort_XXXX
         and repeat the command(s) above.

======================
examples for gfortran:
======================
For a correct cmake build with gfortran:
	-make sure there is no white space in the path of gfortran path (really not needed!)
	-nmake must be set in the path

cmake -G "NMake Makefiles"  -D CMAKE_Fortran_COMPILER=gfortran -DGUI=OFF -D CMAKE_INSTALL_PREFIX=%CRYSFML%\gfortran -D CRYSFML_PREFIX=LibC ..\..\.
cmake -G "NMake Makefiles"  -D CMAKE_Fortran_COMPILER=gfortran -DGUI=OFF -DCMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=%CRYSFML%\gfortran_debug -D CRYSFML_PREFIX=LibC  ..\..\.


 - Once the above steps worked properly the only thing to do is execute the command:
   nmake install

 - Each time you modify a file of the library you go to the appropriate directory and
   execute again: nmake install, the system will recopile only the appropriate files taking
   into account the dependencies.


For building a series of program based on CrysFML we have to set the environment variables telling to cmake where the lib is.
Examples CRYSFML_LIB=c:\CrysFML\ifort\LibC
         WCRYSFML_LIB=c:\CrysFML\ifort\LibW

    or better:  LIB=%LIB%;c:\CrysFML\ifort\LibC;c:\CrysFML\ifort\LibW

For installing the programs in a particular place we have to invoke
  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%PROGCFML%\DistFPS  -DGUI=ON      ..\..\.

  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%ESMERALDA%\DistLS  -DGUI=ON      ..\.

  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%SXTALSOFT%\DistSXT\Windows  -DGUI=ON      ..\.

Example of FullProf
===================
 Run on the build\ifort
 for 32 bits
  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%PROGCFML%\DistFPS  -DGUI=ON -D ARCH32=ON     ..\..\.
  Debug
  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -DCMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX=%PROGCFML%\DistFPS  -DGUI=ON -D ARCH32=ON     ..\..\.
 for 64 bits
  cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%PROGCFML%\DistFPS_64b  -DGUI=ON -D ARCH32=OFF    ..\..\.

Example of Esmeralda
====================
cmake -G "NMake Makefiles" -D CMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=%ESMERALDA%\DistLS     ..\.

Linux
=====
Same as for Windows except that uses "make" instead of "nmake" and the argument for -G is "Unix Makefiles"
cmake -G "Unix Makefiles"  -D GUI=ON  -D ARCH32=OFF -D CMAKE_BUILD_TYPE=Release -DCMAKE_Fortran_COMPILER=ifort -D CMAKE_INSTALL_PREFIX=$CRYSFML/ifort64 -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ../../.
cmake -G "Unix Makefiles"  -D GUI=OFF -D ARCH32=OFF -D CMAKE_BUILD_TYPE=Release -DCMAKE_Fortran_COMPILER=gfortran -D CMAKE_INSTALL_PREFIX=$CRYSFML/GFortran -D CRYSFML_PREFIX=LibC -D WCRYSFML_PREFIX=LibW ../../.
