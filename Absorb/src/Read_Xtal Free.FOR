C -------------------------------------------------------------
C     Last change:  RJA   7 May 99    4:22 pm
C
        SUBROUTINE READ_CRYSTAL_DATA
C
C NEW SUBROUTINE TO READ NEW FORMAT CRYSTAL DATA FILE
C VERSION FOR ABSORB5.1
C READS ALSO THE "DIFFRACTOMETER INFO" FORMERLY IN INSTRUMENT.PAR
C
C THIS IS THE FREE FORMAT VERSION OF JAN 2003
C
	INCLUDE 'Crystalmodel.inc'
	INCLUDE 'Files.inc'
	INCLUDE 'Flags.inc'
	INCLUDE 'DAC.inc'
	INCLUDE 'Unitcell.inc'

        INTEGER IGOT(8)
	CHARACTER STRING*80 , CHEMISTRY*60, ETEXT*256
	REAL WAVELENGTHS(6)		! STORE
	DATA WAVELENGTHS/2.29,1.90,1.79,1.54,0.71,0.56/
	REAL MU_DAC(6,2)			
	DATA (MU_DAC(I,1),I=1,6)/5.273,3.160,2.485,1.585,0.202,0.131/	! ABS COEFFS FOR DIAMOND
	DATA (MU_DAC(I,2),I=1,6)/0.635,0.386,0.308,0.205,0.047,0.039/	! ABS COEFFS FOR BERYLLIUM
C
	rad=atan(1.0)/45.

C 
C SET DEFAULT FLAGS AND VALUES
	IABSCO=0	! NO ABSORPTION
	ICHEM=0		! SOURCE OF MU DEFAULTS TO VALUE
	IDAC=0		! NO DAC
	ISHAD=0	! NO SHADOWING
	I1=0		! NUMBER OF FACES
	IUB=0		! NUMBER OF UB MATRIX LINES READ
	ICELL=0		! CELL CARD
	IMODELFORM=0	! TYPE OF MODEL: 0 MEANS NONE SELECTED
	IUB_WAVE=0	! LOCAL FLAG FOR UB WITH LAMBDA: DEFAULT NO
	ISKIP_REJECT=1  ! SKIP REFLECTIONS MARKED 'REJECT' IN INT FILE
	NINDEX=3	! DEFAULT NUMBER OF INDECES FOR SHELX/RAW
	IWAVE=0		! NO WAVELENGTH SUPPLIED: MOVED HERE 6-APRIL-2012
C
C CHANGE 21 SEPT 2011 TO FIX PROBLEM CAUSED BY MOVE OF 2008 OF IDFORM SETTING TO 
C THE FILE OPENING SUBROUTINES. tHAT MEANT THAT DOING RUN_PROG AFTER THE INPUT
C FILE WAS SELECTED CLEARED THE FORMAT HERE!
C
C	IDFORM_IN=0	! INPUT FORMAT - NOT SET
C	IDFORM_OUT=0	! OUTPUT FORMAT - NOT SET
C
C
C	ICFLAG=0	! INCOMMENSURATE FLAG : DEFAULT IS OFF ...REMOVED 2FEB2012. DONE IN CONFIG

	TTHMIN=0.	! 2THETA MINIMUM
	TTHMAX=180.	! MAX 2THETA CUT-OFF
	SCALE_I=1.0	! DEFAULT RECSALE FACTOR FOR INTENSITIES
	
	PSIMAX(1)=80.	! PSI LIMITS FOR DAC: DEFAULT ALMOST OPEN
	PSIMAX(2)=80.
	MU_MEDIA=0.	! NON-ABSORBING P MEDIUM IN DAC
	IMEDIA=0		! FLAG FOR SAME
C
C FLAGS TO HANDLE NEGATIVE REFLECTION INTENSITIES AND SIGMAS - 21 FEB 2012
	INEGSIG=1
	INEGINT=1
C
C PHI_ZERO FOR DAC
	PHIZERO=0.
	MODEL_ORIGIN=0.
	IMODELORIGIN=0
C  DEFAULTS FOR 'HELP' WITH HKL IN DAC
	IXANVIL=0			! flag for LOCATION FOR CRYSTAL IN DAC. IF ZERO AT CHECKS ERROR
	TCRYSTAL=30.		! DEFAULT THICKNESS OF 30 MICRON
C
C SMALL BEAM CASE
	ISMALL=0

c
C GRID DEFAULTS
	DO I=1,3
		NGRID(I)=3
	ENDDO
	IGRID=0
C
C DIFFRACTOMETER DEFAULTS
	DO I=1,3
		IBL(I)=I	! BUSING-LEVY AXES
	ENDDO
	DO I=1,4
		PARITY(I)=1	!BUSING-LEVY CIRCLE PARITIES
	ENDDO
	XLAMB=0.7093
C
C TRANSFORMATION MATRICES BETWEEN DAC SYSTEM AND PHI-AXIS
	TPHIDAC=0.
	TDACPHI=0.
	DO I=1,3
		TPHIDAC(I,I)=1.0
		TDACPHI(I,I)=1.0
	ENDDO

c
C START LOOP OVER LINES
C
	REWIND(UNIT=ICNT)
100	READ(ICNT,110,ERR=999,END=900)STRING
110     FORMAT(A80)
C
      IF (STRING(1:6) .EQ. '      ')GOTO 100   ! BLANK LABEL
	IF (INDEX(STRING,'#') .NE. 0)GOTO 100	! COMMENT LINE
C
C SECTION TO FIND ENTRIES THAT WE NEED
C
	do k=1,6                ! CONVERT LABEL TO CAPS
	   ino=ichar(STRING(k:k))
	   if(ino .gt. 96 .and. ino .lt. 123)STRING(k:k)=char(ino-32)
	enddo
C
C EXPERIMENT TITLE: 
	IF(STRING(1:5) .EQ. 'TITLE')THEN
		READ(STRING,150)TITLE
150		FORMAT(6X,A80)
		GOTO 100
	ENDIF
C
C NOW CONVERT REST OF LINE TO CAPS - AVOIDS CONVERTING TITLE STRING!!!
	do k=7,80                
	   ino=ichar(STRING(k:k))
	   if(ino .gt. 96 .and. ino .lt. 123)STRING(k:k)=char(ino-32)
	enddo

C 
      IF(STRING(1:6) .EQ. 'BLAXES')THEN
	   READ(STRING(7:80),*,ERR=999)IBL
	ENDIF
C
	IF(INDEX(STRING(1:6),'WAVE') .GT. 0)THEN
	IF(INDEX(STRING(1:6),'WAVEL') .GT. 0)THEN
C WAVELENGTH SPECIFIED BY VALUE
          READ(STRING(7:80),*,ERR=999)IDUM,XLAMB
C	INTERPRETATION OF WAVELENGTH MOVED HERE FROM CALCMU, 6-APRIL-2012
		IF(ABS(XLAMB-2.29) .LT. 0.1)IWAVE=1		! CR
		IF(ABS(XLAMB-1.90) .LT. 0.1)IWAVE=2		! FE
		IF(ABS(XLAMB-1.79) .LT. 0.1)IWAVE=3		! CO
		IF(ABS(XLAMB-1.54) .LT. 0.1)IWAVE=4		! CU
		IF(ABS(XLAMB-0.71) .LT. 0.1)IWAVE=5		! MO
		IF(ABS(XLAMB-0.56) .LT. 0.1)IWAVE=6		! AG
		IF(IWAVE .EQ. 0)THEN
			WRITE(ETEXT,160)XLAMB
160			FORMAT('WAVELENGTH = ',F6.3,' NOT RECOGNISED:',
	1		   '  ABS COEFF CANNOT BE CALCULATED')
			CALL WARNING(ETEXT)
			IABSCO=0
			ABSCO=0.
		ENDIF
	ELSE
C WAVELENGTH SPECIFIED BY TARGET
		L=INDEX(STRING,'WAVE')+4
		IF(INDEX(STRING(L:80),'CR') .GT. 0)IWAVE=1
		IF(INDEX(STRING(L:80),'FE') .GT. 0)IWAVE=2
		IF(INDEX(STRING(L:80),'CO') .GT. 0)IWAVE=3
		IF(INDEX(STRING(L:80),'CU') .GT. 0)IWAVE=4
		IF(INDEX(STRING(L:80),'MO') .GT. 0)IWAVE=5
		IF(INDEX(STRING(L:80),'AG') .GT. 0)IWAVE=6
		IF(IWAVE .EQ. 0)THEN
			WRITE(ETEXT,170)
170			FORMAT('TARGET MATERIAL FOR XRAY SOURCE NOT RECOGNISED:',
	1		   ' ABS COEFF CANNOT BE CALCULATED')
			CALL WARNING(ETEXT)
			IABSCO=0
			ABSCO=0.
		ELSE
			XLAMB=WAVELENGTHS(IWAVE)
		ENDIF
	ENDIF
	ENDIF

	IF(STRING(1:6) .EQ. 'PARITY')THEN
		READ(STRING(7:80),*,ERR=999)PARITY
	ENDIF
C
C THE CRYSTAL MODEL
      IF(STRING(1:6) .EQ. 'ABSORB')THEN
		CALL READ_MODEL(STRING)
		IF(IFATAL .EQ. 1)RETURN
	ENDIF
C
C THE DAC MODEL, IF PRESENT
	IF(STRING(1:3) .EQ. 'DAC')THEN
		CALL READ_DAC(STRING)
		IF(IFATAL .EQ. 1)RETURN
	ENDIF
C
C  THE UNIT CELL
	IF(STRING(1:4) .EQ. 'CELL')THEN
		READ(STRING(7:80),*,end=215)ACELL,CVOL		! END TO TRAP CVOL ABSENT
215		IF(CVOL .LT. 0.1)CVOL=GETCELLVOL(ACELL,0)
		icell=1
	ENDIF	
C
C THE UB MATRIX: modified for UBL means UB(input)=UB(BusingLevy) x lambda
C Must set flag here and do multiplication at end, because lambda maybe not read yet
	IF(STRING(1:2) .EQ. 'UB')THEN
		IF(STRING(1:3) .EQ. 'UBL')IUB_WAVE=1		! UB CONTAINS LAMBDA: EG CRYSALIS
		IUB=IUB+1
		IF(IUB .EQ. 4)THEN
			WRITE(ETEXT,235)
235			FORMAT('*****ERROR: TOO MANY UB LINES')
			CALL ERROR(ETEXT)
			RETURN
		ENDIF
		READ(STRING(3+IUB_WAVE:80),*)(UB(IUB,J),J=1,3)
	ENDIF
C
C 2THETA CUT OFFS
C
	IF(STRING(1:6) .EQ. '2THETA')THEN
		J=INDEX(STRING,'MAX')
		IF(J .NE. 0)READ(STRING(J+3:J+12),*)TTHMAX
		J=INDEX(STRING,'MIN')
		IF(J .NE. 0)READ(STRING(J+3:J+12),*)TTHMIN
	ENDIF	
C
C RESCALE
C
	IF(STRING(1:6) .EQ. 'SCALE')THEN
		READ(STRING(7:80),*)SCALE_I
	ENDIF		
C
C MU BY CELL CONTENTS
C
	I=INDEX(STRING,'CONTENTS')
	IF(I .NE. 0)THEN
		IF(IABSCO .EQ. 1)THEN
			WRITE(ETEXT,330)
330			FORMAT('BOTH CELL CONTENTS AND ABSORPTION',
	1	 ' COEFFICIENT GIVEN IN EXP FILE:'
     2	 ' VALUE ON ABSORB MU CARD WILL BE USED')
			CALL WARNING(ETEXT)
		ELSE
			READ(STRING(I+8:80),331)CHEMISTRY
331			FORMAT(A60)
			ICHEM=1			! SAYS SOURCE IS CHEMISTRY
		ENDIF
	ENDIF
C
C SPECIAL CARDS FOR COMMERCIAL OPERATIONS
C
	I=INDEX(STRING,'STOE')
	IF(I .NE. 0)THEN
		IF(ICONFIG .EQ. 1)CALL READ_SPECIALS(STRING)
	ENDIF

	GOTO 100
C********************************************************************
C  END OF DECODING: CHECK FOR ALL NECESSARY DATA AND CONSISTENCY
c
C
C  UB STUFF: IF UB CONTAINS WAVELENGTH, DIVIDE BY XLAMB
C
900	IF(IUB_WAVE .EQ. 1)THEN
		DO I=1,3
			DO J=1,3
				UB(I,J)=UB(I,J)/XLAMB
			ENDDO
		ENDDO
	ENDIF
C GET RECIP CELL, AND ALSO REAL UNIT CELL AND VOL FROM UB
C  NOTE: REAL UNIT CELL IS STORED IN AUB
	IF(IUB .EQ. 3)THEN
		CALL ROTATE_UB
		CALL RECIP_CELL			! SETS G* AND RECIP CELL FROM UB
		IF(IFATAL .EQ. 1)RETURN
		CALL REAL_CELL  		! GETS REAL UNIT CELL AND VOL FROM g*
		IF(IFATAL .EQ. 1)RETURN
	ELSE IF(IUB .NE. 0)THEN
			WRITE(ETEXT,940)
940			FORMAT('ERROR IN READ_HKL: '
	1				'ONLY PART OF UB MATRIX PRESENT')
			CALL ERROR(ETEXT)
			RETURN
	ENDIF
C
C CHECK FOR UNIT-CELL FROM CELL CARD VS UB MATRIX
	IF( CVOL .LT. 0.1)THEN		! NO CELL FROM CELL CARD
		IF(IUB .EQ. 3)THEN
			DO I=1,6
				ACELL(I)=AUB(I)
			ENDDO
			CVOL=AUB(7)
		ELSE
			WRITE(ETEXT,910)
910			FORMAT('NO UNIT CELL OR UB IN EXP FILE')
			CALL ERROR(ETEXT)
			RETURN
		ENDIF
	ELSE
		IF(IUB .EQ. 3)THEN
C			CAN CHECK CELL FROM CARD AND CELL FROM UB
			IUBERR=0
			DO I=1,6
				IF(ABS(AUB(I)-ACELL(I)) .GT. 0.01*AUB(I))IUBERR=IUBERR+1
			ENDDO
			IF(IUBERR .GT. 0)THEN				
					WRITE(ETEXT,915)AUB,ACELL
915					FORMAT('UNIT CELL IN EXP FILE ',
	1	'DIFFERENT FROM CALCULATED FROM UB MATRIX:',
     2    '   FROM UB:',7F10.4,'  FROM EXP:',7F10.4)
					CALL WARNING(ETEXT)
			ENDIF
		ENDIF
	ENDIF
C  GET MU FROM CHEMISTRY (MUST FOLLOW UB CHECKS - NEEDS CVOL!)
	IF(ICHEM .EQ. 1)CALL CALCMU(CHEMISTRY)
C	     RETURNS ABSCO AND IABSCO=-1 IF SUCCESS, IABSCO=0 IF FAIL.
C
C  NEW JUNE 2012 - SMALL BEAM FOR DAC
C  MUST BE DONE BEFORE OTHER CHECKS ON TYPES OF MODEL
	IF(ISMALL .EQ. 1)THEN
		CALL SETUP_SMALL
		IF(IFATAL .EQ. 1)RETURN
	ENDIF

C  MAKE SURE ABSCO AND MODEL ETC CONSISTENT
	IF(IMODELFORM .EQ. 0)THEN		! NO MODEL LOADED
		IF(IABSCO .NE. 0)THEN
			WRITE(ETEXT,800)
800			FORMAT('NO MODEL LOADED BUT ABS COEFF > 0  : ',
	1		'NO CRYSTAL ABSORPTION CORRECTIONS WILL BE MADE')
			CALL WARNING(ETEXT)
			IABSCO=0		
		ENDIF		
	ELSE
		IF(IABSCO .EQ. 0)THEN
		    WRITE(ETEXT,801)
801			FORMAT('MODEL LOADED BUT ABS COEFF = 0  :'
	1		,'NO CRYSTAL ABSORPTION CORRECTIONS WILL BE MADE')
			CALL WARNING(ETEXT)
			ABSCO=0.	
		ENDIF		
	ENDIF
C
C CHECK FOR FACES/CORNERS 
C
	IF(IMODELFORM .EQ. 1)THEN
		IF(I1 .EQ. 0)THEN
	      WRITE(ETEXT,802)
802		  FORMAT('NO CRYSTAL FACES LOADED FROM EXP FILE')
		  CALL ERROR(ETEXT)
		  RETURN
	    ENDIF
	ELSE IF(IMODELFORM .EQ. 2)THEN
		IF(I1 .EQ. 0)THEN
	      WRITE(ETEXT,802)
		  CALL ERROR(ETEXT)
		  RETURN
	    ENDIF
		IF(IXANVIL .NE. 0)THEN
	      WRITE(ETEXT,811)
811		  FORMAT('CRYSTAL MODEL SPECIFIED BY XYZFACES - ', 
	1		'DAC CRYSTAL CARD WILL BE IGNORED')
		  CALL WARNING(ETEXT)
		  RETURN
		ENDIF
	ELSE IF(IMODELFORM .EQ. 3)THEN
		IF(NCORN .EQ. 0)THEN
	      WRITE(ETEXT,803)
803		  FORMAT('NO CRYSTAL CORNERS LOADED FROM EXP FILE')
		  CALL ERROR(ETEXT)
		  RETURN
		ENDIF
	ELSE IF(IMODELFORM .EQ. 4)THEN
		IF(NCORN .NE. 0 .OR. I1 .NE. 0)THEN
	      WRITE(ETEXT,804)
804		  FORMAT('SPHERICAL MODEL SELECTED, SO'
	1	  ' OTHER CRYSTAL INFO WILL BE IGNORED'/)
			CALL WARNING(ETEXT)
		ENDIF 
	ELSE IF(IMODELFORM .EQ. 5)THEN
		IF(IDAC .EQ. 0)THEN
	      WRITE(ETEXT,807)
807		  FORMAT('FILLED GASKET MODEL SELECTED, ',
	1	  'BUT NO DAC INFORMATION LOADED')
		  CALL ERROR(ETEXT)
		  RETURN
		ENDIF 
		IF(ISHAD .EQ. 0)THEN
	      WRITE(ETEXT,808)
808		  FORMAT('FILLED GASKET MODEL SELECTED, '
	1	  ,'BUT NO GASKET INFORMATION LOADED')
		  CALL ERROR(ETEXT)		  
		  RETURN
		ENDIF
		IF(MU_MEDIA .GT. 0.)THEN
	      WRITE(ETEXT,809)
809		  FORMAT('FILLED GASKET MODEL SELECTED, '
	1	  ,'REQUEST FOR ABSORPTION BY PRESSURE MEDIUM IGNORED')
		  CALL WARNING(ETEXT)
		  IMEDIA=0		! RESET FLAG
		ENDIF 
		IF(IMODELORIGIN .EQ. 1)THEN
	      WRITE(ETEXT,810)
810		  FORMAT('FILLED GASKET MODEL SELECTED, '
	1	  ,'REQUEST FOR ORIGIN OFFSET IGNORED')
		  CALL WARNING(ETEXT)
		  IMODELORIGIN=0		! RESET FLAG
		  MODEL_ORIGIN=0.		! SET OFFSET ZERO
		ENDIF
	ENDIF
C
C CHECK FOR MODEL/DAC CONSISTENT
	IF(IDAC .NE. 0)THEN
	  IF(IMODELFORM .EQ. 1 .AND. ABS(PHIZERO) .GT. 0.1)THEN			! pHIZERO AND HKL FACES NOT ALLOWED
	    WRITE(ETEXT,820)
820		FORMAT('HKL MODEL FOR CRYSTAL IS NOT COMPATIBLE WITH PHIZERO - ',
	1	'EITHER SET PHIZERO TO 0 OR USE MODEL SPECIFIED BY XYZ OF CORNERS')
		CALL ERROR(ETEXT)
		RETURN
	  ELSEIF(IMODELFORM .EQ. 1 .AND. IXANVIL .EQ. 0)THEN			! HKL MODEL BUT NO DAC CRYSTAL CARD
	    WRITE(ETEXT,805)
805		FORMAT('INPUT BY HKL MODEL ALONE NOT RECOMMENDED ',
	1	'USE DAC CRYSTAL TO SUPPLY CRYSTAL THICKNESS AND LOCATION')
		CALL WARNING(ETEXT)
	  ELSE IF(IMODELFORM .EQ. 4)THEN
			WRITE(ETEXT,806)
806		format('SPHERICAL CRYSTAL NOT COMPATIBLE WITH DAC. ',
	1	'CALCULATIONS WILL PROCEED WITH NON-ABSORBING CRYSTAL')
		CALL WARNING(ETEXT)
		IABSCO=0
		ABSCO=0.
		IMODELFORM=0
	  ELSE IF(IMODELFORM .EQ. 0 .AND. ISHAD .EQ. 1)THEN
		WRITE(ETEXT,817)
817		FORMAT('NO CRYSTAL MODEL LOADED, SO SHADOWING BY GASKET',
	1			' CANNOT BE CALCULATED')
		CALL WARNING(ETEXT)
		ISHAD=0
        ELSEIF(IXANVIL .NE. 0)THEN
	    IF(ISHAD .EQ. 1)THEN
			IF(TCRYSTAL .GT. TG)THEN
				WRITE(ETEXT,818)TCRYSTAL,TG
818				FORMAT('CRYSTAL IS THICKER THAN THE GASKET - ',
	1			'CHECK DAC CRYSTAL AND GASKET CARDS')
				CALL ERROR(ETEXT)
				RETURN
			ENDIF
		ELSE
			IF(IXANVIL .EQ. 2)THEN
	    		WRITE(ETEXT,819)
819				FORMAT('DAC CRYSTAL USED BUT NO GASKET INFORMATION -',
	1			'ADD A DAC GASKET CARD')
				CALL ERROR(ETEXT)
			ENDIF
		ENDIF		  
	  ENDIF
	ENDIF  	
C
C WARN IF PHIZERO SET WITHOUT DAC
C
	IF(ABS(PHIZERO) .GT. 0.1 .AND. IDAC .EQ.0 )THEN
		WRITE(ETEXT,828)
828		FORMAT('PHIZERO SET BUT NO DAC - PHIZERO WILL BE IGNORED')
		CALL WARNING(ETEXT)
	ENDIF
C
C SET THE ABSORPTION COEFFICIENTS FOR THE DAC COMPONENTS, IF NECESSARY
C
	IF(IDAC .NE. 0)THEN
		IW=IWAVE
		IF(IW .LT. 1 .OR. IW .GT. 6)IW=5			! DEFAULT COEFFS TO Mo 
C
C FIRST THE ANVILS		
		IF(MU_DIA(1) .LT. 0.001)MU_DIA(1)=MU_DAC(IW,1)
		IF(MU_DIA(2) .LT. 0.001)MU_DIA(2)=MU_DIA(1)
		IF(TDIAMOND(2) .LT. 0.1)TDIAMOND(2)=TDIAMOND(1)
C
C NOW THE BACKING PLATES
		IF(MU_BE(1) .LT. 0.001)MU_BE(1)=MU_DAC(IW,2)	
		IF(TBERYL(1) .LT. 0.001)MU_BE(1)=0.0					! NO BACKING PLATE					
		IF(MU_BE(2) .LT. 0.001)MU_BE(2)=MU_BE(1)
		IF(TBERYL(2) .LT. 0.001)TBERYL(2)=TBERYL(1)
	ENDIF
c
c CHECKS ON REASONABLE VALUES FOR DAC COMPONENTS
C     NOT FOR IDAC=5 WHICH IS AN ABSORPTION CURVE
	IF(IDAC .GT. 0 .AND. IDAC .LT. 5)THEN
		IF(TDIAMOND(1) .LT. 0.5 .OR. TDIAMOND(2) .LT. 0.5)THEN
			WRITE(ETEXT,830)TDIAMOND(1),TDIAMOND(2)
830			FORMAT('ANVILS LOOK TOO THIN: ',F5.2,
	1			' AND ',F5.2,' MM')		
			CALL WARNING(ETEXT)
		ENDIF
C
C     TEST MU*T: A VALUE OF 3.0 IS ONLY 5% TRANSMISSION
		IF(TDIAMOND(1)*MU_DIA(1) .GT. 3. 
	1			.OR. TDIAMOND(2)*MU_DIA(2) .GT. 3.)THEN
			WRITE(ETEXT,831)TDIAMOND(1)*MU_DIA(1),TDIAMOND(2)*MU_DIA(2)
831			FORMAT('MU*T FOR ANVILS ARE ',F6.2,' AND ',
	1				F6.2,' AND ALLOW LESS THAN 5% TRANSMISSION')
			CALL ERROR(ETEXT)
			RETURN
		ENDIF
		IF(MU_DIA(1) .LT. 0.01 .OR. MU_DIA(2) .LT. 0.01)THEN
			WRITE(ETEXT,832)MU_DIA(1),MU_DIA(2)
832			FORMAT('ANVIL ABSORPTION COEFFS LOOK TOO LOW: ',F5.2,
	1			' AND ',F5.2,' MM-1')		
			CALL WARNING(ETEXT)
		ENDIF
C
C NOTE: CANNOT CHECK FOR LOW VALUES FOR PLATES, AS PLATES CAN BE ABSENT
C
		IF(TBERYL(1)*MU_BE(1) .GT. 3. .OR. TBERYL(2)*MU_BE(2) .GT. 3.)THEN
			WRITE(ETEXT,835)TBERYL(1)*MU_BE(1),TBERYL(2)*MU_BE(2)
835			FORMAT('MU*T FOR BACKING PLATES ARE ',F6.2,' AND ',
	1				F6.2,' AND ALLOW LESS THAN 5% TRANSMISSION')	
			CALL ERROR(ETEXT)
			RETURN
		ENDIF
		IF(MU_BE(1) .GT. 3. .OR. MU_BE(2) .GT. 3.)THEN
			WRITE(ETEXT,837)MU_BE(1),MU_BE(2)
837			FORMAT('BACKING PLATE ABSORPTION COEFFS ARE TOO HIGH TO ALLOW',
	1			' ANY TRANSMITTED INTENSITY:',F7.1,' AND ',F7.1,' MM-1')				
			CALL ERROR(ETEXT)
			RETURN
		ENDIF

	
	
	ENDIF
	

C
	RETURN		! PASSED TESTS
C
C ERRORS ON READING CRYSTAL FILE
C
999   WRITE(ETEXT,998)STRING
998	FORMAT('  ERROR READING EXPERIMENT DATA FILE',
	1'  STRING WAS: ',A80)
	CALL ERROR(ETEXT)
	RETURN
c
      END
C
C **************************************************************************
C
	SUBROUTINE READ_MODEL(STRING)
c
	INCLUDE 'Crystalmodel.inc'
	INCLUDE 'Files.inc'
	INCLUDE 'Facestore.inc'
	CHARACTER STRING*80, ETEXT*256
	
C
C  THIS SUBROUTINE READS DATA FROM CARDS STARTING 'ABSORB'
C	AND HANDLES RESCALING AND TESTS

	
C FIRST, THE ABSORPTION COEFF IN MM-1
C
	I=INDEX(STRING,'MU')		
	IF(I .NE. 0)THEN
		IF(ICHEM .EQ. 1)THEN
		    WRITE(ETEXT,110)
110			FORMAT('BOTH CELL CONTENTS AND ABSORPTION',
	1	 ' COEFFICIENT GIVEN IN EXP FILE: '
     2	 ,' VALUE ON ABSORB MU CARD WILL BE USED')
		   CALL WARNING(ETEXT)
		ENDIF
C
		READ(STRING(I+2:80),*)ABSCO
		IF(ABSCO .GT. 0.)THEN
		  IABSCO=1
		  ABSCO=ABSCO/1000.		! HELD INTERNALLY AS MICRONS		
		ELSE
	      IABSCO=0		! NO ABSORPTION
		ENDIF
		RETURN
	ENDIF
C
C
C THE REJECT LEVEL (IN I/SIG I)
C
	I=INDEX(STRING,'LESSTHAN')
	IF(I .NE. 0)THEN
		READ(STRING(I+8:80),*)FACT
		IF(FACT.LE.0.0)FACT=0.0
		RETURN
	ENDIF
C     
C WHAT TO DO WITH NEGATIVE INTENSITIES (THE DEFAULT IS KEEP)
C
	I=INDEX(STRING,'NEGINT')
	IF(I .NE. 0)THEN
		IF(INDEX(STRING,'KEEP') .NE. 0)INEGINT=1
		IF(INDEX(STRING,'REJECT') .NE. 0)INEGINT=-1
		IF(INDEX(STRING,'ZERO') .NE. 0)INEGINT=0
		RETURN
	ENDIF
C
C WHAT TO DO WITH NEGATIVE SIGMAS (THE DEFAULT IS KEEP)
C
	I=INDEX(STRING,'NEGSIG')
	IF(I .NE. 0)THEN
		IF(INDEX(STRING,'KEEP') .NE. 0)INEGSIG=1
		IF(INDEX(STRING,'REJECT') .NE. 0)INEGSIG=-1
		RETURN
	ENDIF

C
C REJECT OR KEEP REFLECTIONS FLAGGED REJECT
C
	I=INDEX(STRING,'INTREJ')
	IF(I .NE. 0)THEN
		IF(INDEX(STRING,'KEEP') .NE. 0)ISKIP_REJECT=0
		RETURN
	ENDIF

		
C THE MODEL TYPE AND GRID SIZE, ALSO IGRID TO CONTROL PRINTING
	I=INDEX(STRING,'MODEL')
	IF(I .NE. 0)THEN
C
		J=INDEX(STRING,'HKL')		
		IF(J .NE. 0)THEN
			IMODELFORM=1			! SAYS HKL
		    READ(STRING(J+3:80),*,END=980)NGRID,IGRID	
			RETURN
		ENDIF
C
		J=INDEX(STRING,'XYZFACE')
		IF(J .NE. 0)THEN
			IMODELFORM=2			
		    READ(STRING(J+7:80),*,END=980)NGRID,IGRID	
			RETURN
		ENDIF
C
		J=INDEX(STRING,'XYZCORNER')
		IF(J .NE. 0)THEN
			IMODELFORM=3			
		    READ(STRING(J+9:80),*,END=980)NGRID,IGRID	
			RETURN
		ENDIF
C
		J=INDEX(STRING,'SPHERE')
		IF(J .NE. 0)THEN
			IMODELFORM=4						!HERE FOR SPHERE
			READ(STRING(J+6:80),*,END=980)XTAL_RAD,NGRID(1),IGRID 
		    RETURN
		ENDIF
C
		J=INDEX(STRING,'FILLED GASKET')
		IF(J .NE. 0)THEN
			IMODELFORM=5			
		    READ(STRING(J+14:80),*,END=980)NGRID,IGRID	
			RETURN
		ENDIF
C
		WRITE(ETEXT,80)STRING
80		FORMAT('UNRECOGNISED LABEL ON ABSORB MODEL CARD:  ',A80)
		CALL WARNING(ETEXT)
	ENDIF
C
C FACE CARDS: MUST STORE BECAUSE THESE MAY PRECEED THE MODEL CARD!
C
	I=INDEX(STRING,'FACE')		! IMODELFORM SHOULD BE 1 OR 2 (OR 0) BUT NOT 3 OR 4 or 5
	IF(I .NE. 0)THEN
		IF(IMODELFORM .GT. 2)THEN
			  WRITE(ETEXT,950)
950			  FORMAT('INCONSISTENT DESCRIPTION OF MODEL IN EXP FILE: '
	1			' FACES GIVEN FOR A CORNER MODEL')
			  CALL ERROR(ETEXT)
			  RETURN
		ENDIF
		I1=I1+1				!COUNTER
		FACE_STORE(I1)=STRING(I+4:80)
		RETURN
	ENDIF
C
C CORNER CARDS: MUST STORE BECAUSE THESE MAY PRECEED THE MODEL CARD!
C
	I=INDEX(STRING,'CORNER')		
	IF(I .NE. 0)THEN			!IMODELFORM SHOULD BE 3 (OR 0 IF NOT YET SET)
		IF(IMODELFORM .NE. 3 .AND. IMODELFORM .NE. 0)THEN
			  WRITE(ETEXT,951)
951			  FORMAT('INCONSISTENT DESCRIPTION OF MODEL IN EXP FILE: '
	1			' CORNERS GIVEN FOR A FACE MODEL')
			  CALL ERROR(ETEXT)
			  RETURN
		ENDIF
		NCORN=NCORN+1				!COUNTER
		IF(NCORN .GT. 200)THEN
				WRITE(ETEXT,800)
800			FORMAT('TOO MANY CORNERS IN CRYSTAL MODEL: LIMIT IS 200')
				CALL ERROR(ETEXT)
				RETURN
		ENDIF
		FACE_STORE(NCORN)=STRING(I+6:80)
		RETURN
	ENDIF
C
C  OFFSET FOR MODEL ORIGIN
C
	I=INDEX(STRING,'ORIGIN')		
	IF(I .NE. 0)THEN		
		READ(STRING(I+6:80),*)MODEL_ORIGIN	! NO NEED FOR END - DEFAULT IS ZEROES
		IMODELORIGIN=1
		RETURN
	ENDIF
C
C IF HERE THEN UNRECOGNISED LABEL
C
	WRITE(ETEXT,900)STRING(7:80)
900	FORMAT('UNRECOGNISED LABEL ON AN ABSORB CARD: ',A74)
	CALL WARNING(ETEXT)
	RETURN
C
C NGRID OR IGRID MISSING ON MODEL CARDS
C
980	WRITE(ETEXT,981)STRING
981	FORMAT('DATA MISSING FROM CARD:  ',A80)
	CALL ERROR(ETEXT)
	RETURN
	END
C
C ********************************************************************************************
	SUBROUTINE READ_DAC(STRING)
C
C READS DATA FOR DAC'S
C MODIFIED JUNE 2003 TO READ TWO ANVILS
C
	REAL PSI_START,PSI_END,PSI_STEP
	INCLUDE 'Files.inc'
	INCLUDE 'DAC.inc'
	include 'crystalmodel.inc'
	CHARACTER STRING*80
C
C DAC TYPE 
C
	I=INDEX(STRING,'TYPE')
	IF(I .NE. 0)THEN
		READ(STRING(I+4:80),*)idac
		IF(IDAC .GT. 5 .OR. IDAC .LT. 0)IDAC=0
		RETURN
	ENDIF
C
C FOR TYPE 5 READ THE PSI-DEPENDENCE AS I/Io VALUES 
C
	I=INDEX(STRING,'ABSPSI')
	IF(I .NE. 0)THEN
		J=INDEX(STRING,'CURVE')
		IF(J .NE. 0)THEN
			READ(STRING(J+5:80),*,END=35)ABSPSI_PAR(1),ABSPSI_PAR(2)	! SINGLE PARAMETER
35			NTERMS_PSI= -1										! FLAG
			IF(ABSPSI_PAR(2) .LT. 0.01)ABSPSI_PAR(2)=ABSPSI_PAR(1)
		ELSE
			NTERMS_PSI=1						! TABLE OF VALUES
30			READ(ICNT,40)string
40			FORMAT(a80)
			IF(INDEX(STRING,'END') .NE. 0)GOTO 60
			READ(STRING,*,END=45)(PSIABS(J,NTERMS_PSI),J=1,3)
45			IF(PSIABS(1,NTERMS_PSI) .LT. 0.)GOTO 30				!IGNORE NEGATIVE PSI
			IF(PSIABS(2,NTERMS_PSI) .LT. 0.)GOTO 30				!IGNORE NEGATIVE CORRECTIONS
			IF(PSIABS(3,NTERMS_PSI) .LT. 0.001)
	1			PSIABS(3,NTERMS_PSI)=PSIABS(2,NTERMS_PSI)
			NTERMS_PSI=NTERMS_PSI+1
			GOTO 30
60			NTERMS_PSI=NTERMS_PSI-1
		ENDIF
		RETURN
	ENDIF
	

C
C ANVIL
	I=INDEX(STRING,'ANVIL')
	IF(I .NE. 0)THEN
		READ(STRING(I+5:80),*,END=110)TDIAMOND(1),MU_DIA(1),
	1									TDIAMOND(2),MU_DIA(2)		! IN MM AND MM-1
110		RETURN
	ENDIF
C
C BE PLATTEN
	I=INDEX(STRING,'PLATE')
	IF(I .NE. 0)THEN
		READ(STRING(I+5:80),*,end=120)TBERYL(1),MU_BE(1),
	1									TBERYL(2),MU_BE(2)		! IN MM AND MM-1
120	RETURN
	ENDIF
C
C ANGLE LIMITS
	I=INDEX(STRING,'OPEN')
	IF(I .NE. 0)THEN
	    tp1=0.
		tp2=0.
		READ(STRING(I+4:80),*,END=130)tp1,tp2
130		PSIMAX(1)=TP1
		PSIMAX(2)=TP2		! THIS ALLOWS DEFAULTS AND SINGLE ENTRY ON CARD TO WORK
		IF(PSIMAX(2) .LT. 1. )PSIMAX(2)=PSIMAX(1)				!TRAP ONLY ONE VALUE ON LINE
		PSIMAX(1)=PSIMAX(1)*atan(1.)/45.
		PSIMAX(2)=PSIMAX(2)*atan(1.)/45.		! STORED AS RADIANS
		RETURN
	ENDIF
C
C READ GASKET HOLE INFORMATION: IF GASKETMU < 0 THEN MEANS OPAQUE
C    GASKETMU=0. IS ALLOWED - NON-ABSORBING GASKET  !!!
C
	I=INDEX(STRING,'GASKET')
	IF(I .NE. 0)THEN
		IOPAQUE=0
		READ(STRING(I+6:80),*,end=140)TG,RGASKET,GASKETMU,THRESHO
140		IF(GASKETMU .LT. 0.0)IOPAQUE=1
	    ISHAD=1
		GASKETMU=GASKETMU/1000.		!CONVERT TO MICRONS from mm-1
		RETURN
	ENDIF
c
C MU OF PRESSURE MEDIUM
C
	I=INDEX(STRING,'MUMEDIA')
	IF(I .NE. 0)THEN
		READ(STRING(I+7:80),*)MU_MEDIA	! IN MM-1
		MU_MEDIA=MU_MEDIA/1000.		! CONVERT TO MICRONS
		IMEDIA=1
		RETURN
	ENDIF
C
C PHI ZERO
C
	I=INDEX(STRING,'PHIZERO')
	IF(I .NE. 0)THEN
		READ(STRING(I+7:80),*)PHIZERO
C
C SET UP PHI-AXIS TO DAC AND REVERSE TRANSFORMS
C PHIZERO KEPT AS DEGREES BECAUSE PROGRAM DOES NOT USE IT, ONLY REPORTS
C ALL USE OF PHIZERO IS IN THE TRANSFORMATION MATRICES:
		RPZ=PHIZERO*atan(1.)/45.
C
C MATRICES ALRREADY INITIALISED TO IDENTITY
		TPHIDAC(1,1)=COS(RPZ)
		TPHIDAC(1,2)=-SIN(RPZ)
		TPHIDAC(2,1)=SIN(RPZ)
		TPHIDAC(2,2)=COS(RPZ)
		TDACPHI=TRANSPOSE(TPHIDAC)
		RETURN
	ENDIF
c
C  DAC CRYSTAL CARD TO HELP WITH HKL INPUT
C
	I=INDEX(STRING,'CRYSTAL')
	IF(I .NE. 0)THEN
		READ(STRING(I+7:80),*)IXANVIL,TCRYSTAL
		IF(IXANVIL .LT. 1 .OR. IXANVIL .GT. 2)IXANVIL=1
		IF(TCRYSTAL .LT. 1.0)TCRYSTAL=30.
		RETURN
	ENDIF
C
C DAC SMALL BEAM CASE
	I=INDEX(STRING,'SMALLBEAM')
	IF(I .NE. 0)THEN
		ISMALL=1
		RETURN
	ENDIF


C
C IF HERE THEN UNRECOGNISED LABEL
C
	WRITE(ESTRING,900)STRING
900	FORMAT('UNRECOGNISED LABEL ON A DAC CARD: ',A80)
	CALL ERROR(ESTRING)
	RETURN

      END
C
C***************************************************************************
C
	SUBROUTINE SETUP_SMALL
C
C  SETS UP SMALL BEAM CASE FOR DAC
C
	INCLUDE 'FLAGS.INC'
	INCLUDE 'DAC.INC'
	INCLUDE 'FACESTORE.INC'
	INCLUDE 'CRYSTALMODEL.INC'
	CHARACTER ESTRING*256
	REAL TEMP(2,4)
C
C
	IF(IXANVIL .EQ. 0)THEN
		WRITE(ESTRING,900)ESTRING
900		FORMAT('USE OF DAC SMALL REQUIRES DAC CRYSTAL AS WELL')
		CALL ERROR(ESTRING)
		RETURN
	ENDIF
C
	IMODELFORM = 3		! SETS XYZ OF CORNERS
	NGRID=0				! SETS 1 GRID POINT
	IGRID=0				! SUPPRESSES PRINTING OF GRID INFO
C
C NOW BUILD A DUMMY SQUARE CRYSTAL MODEL CENTERED IN DAC
C
C FIRST CALCULATE AN IDEAL COORDINATE AS TCRSYTAL/2 TIMES TAN(PSI_MAX)
C
	RP=PSIMAX(1)
	IF(PSIMAX(2) .GT. RP)RP=PSIMAX(2)   ! PSIMAX IS IN RADIANS
C
	R=TCRYSTAL*TAN(RP)/2.0
	IF(R .GT. 100.)R=100.
C
C CHECK R AGAINST GASKET R
C
C	IF(R .GT. RGASKET)R=0.5*RGASKET
C fixed 15-July-2017 for case when rgasket = 0.      
	IF(R .GT. RGASKET .and. RGASKET .GT. 1.)R=0.5*RGASKET
C
C NOW CREATE CORNERS
C
	NCORN=4			! FOUR CORNERS
	TEMP(1,1)=R
	TEMP(2,1)=R
	TEMP(1,2)=R
	TEMP(2,2)=-1.0*R
	TEMP(1,3)=-1.0*R
	TEMP(2,3)=-1.0*R
	TEMP(1,4)=-1.0*R
	TEMP(2,4)=R
C
C WRITE IN TO THE FACESTORE
	DO I=1,4
		WRITE(FACE_STORE(I),10)TEMP(1,I),TEMP(2,I)
10		FORMAT(F6.1,'   0.0   ',F6.1)
	ENDDO
	RETURN
	END
