C -------------------------------------------------------------
c
	SUBROUTINE PROCESS_DATA
C
C	V6.1:	CHANGE ISIGSUM(ISIG) TO ISIGSUM(ISIG,ITH) SO AS TO PRINT A TABLE
C			OF OBSERVED REFLECTIONS AS A FUNCTION OF 2THETA AND I/SIG
C			ALSO AS FUNCTION OF PSI AND PSID IF DAC
C			change is totally internal to this subroutine
C
	INCLUDE 'reflection.inc'
	include 'files.inc'
	INCLUDE 'Flags.inc'
	include 'dac.inc'
	INCLUDE 'totals.inc'
	include 'crystalmodel.inc'
	CHARACTER*80 TEXT
	CHARACTER*13 REJSTRING 
	REAL STDMN(4),STDMX(4),STDAV(4),STDSS(4),STDSSS(4),DCSHELX(6)
	INTEGER NUM(4),ISIGSUM(12,10),ISUMTH(10),IPSISUM(12,7,2),PFORMAT
	CHARACTER*6 SIGLABEL(12)
	character*25 stars
	CHARACTER*200 HEADER,OUTPUT
	INTEGER HLEN,PF(10)
	REAL DD(6)
	DATA SIGLABEL/'    <1','   1-2','   2-3','   3-4','   4-5',
	1'   5-9',' 10-19',' 20-29',' 30-39',
	2' 40-49','50-100','  >100'/
C
    6 FORMAT(20A4)
    8 FORMAT(3(I8,4X),7F12.3)
   18 FORMAT(I7,I9,5F11.3)
   19 FORMAT(//5X,'STANDARDS:'/'  STD. NO.  NUMBER   AVG. F      SIGMA',
     1'     MIN. F     MAX. F        P'/)
C
C
	SCALE=1.
C
C  INITIALIZE
1	rad=atan(1.0)/45.0
	trmin=1.
	trmax=0.001
	gtrans_min=1.
	gtrans_max=0.001
	medtrans_min=1.
	medtrans_max=0.001
	totalint_min=1.0
	totalint_max=0.001
	vfactormin=1.00
	totaltrns_min=1.
	totaltrns_max=0.001
	DACABSMAX=0.001
	DACABSMIN=1.0E6
	SHADMIN=1.
	SHADMAX=0.
	NPSIREG=0
	NOBSC=0
      LINES=60
      NREF=0
      NLT=0
      NGT=0
	NREJ=0
	NTTH=0
	NSEQ=0			! FOR SHELX FILES WITH NO SEQUENCE NUMBERS
	N_NEGSIG=0		! NUMBER OF NEGATIVE SIGMA REFLECTIONS
	N_NEGINT=0		! NUMBER OF NEGATIVE INTENISTY REFLECTIONS
      DO 90 I=1,4
      STDMN(I)=1.0E6
      STDMX(I)=0.0
      STDAV(I)=0.0
      STDSS(I)=0.0
	STDSSS(I)=0.0
   90 NUM (I)=0
	DO I=1,12
		DO J=1,7
			IPSISUM(I,J,1)=0
			IPSISUM(I,J,2)=0
		ENDDO
		DO J=1,10
			ISIGSUM(I,J)=0.
		ENDDO
	ENDDO
C
C SET PRINT FILE FORMAT  (As of Sept 2012, use up to pf(6)
C
	PF=0			! SET ALL FLAGS OFF
	IF(ICFLAG .NE. 0)THEN		! INCOMMENSURATE
		PF(1)=1						! EXTRA HKL
		PF(3)=1						! 2theta printed (must be hkl file for ic)		
	ENDIF
	IF(ICONFIG .EQ. 1)PF(2)=1	! STOE OPTIONS
	IF(IDFORM_IN .EQ. 1)THEN
		PF(4)=1					! RFINE INPUT: ANGLES AVAILABLE
	ELSE
		PF(3)=1					! NO SETTING ANGLES
	ENDIF
	IF(IDAC .NE. 0)PF(5)=1		! DAC 
	IF(ISMALL .EQ. 1)PF(6)=1	! SMALL BEAM
C
C CONSTRUCT HEADER
	HEADER='   H   K   L'
	I=12
	IF(PF(1) .EQ. 1)THEN
		HEADER(I+1:I+12)='   M   N   O'
		I=I+12
	ENDIF
	HEADER(I+1:I+42) ='    FSQ    SIG(FSQ)   BETA    SCALE T(XTL)'  
	I=I+42
	IF(PF(2) .EQ. 1)THEN
		HEADER(I+1:I+9)='  IFACTOR'
		I=I+9
	ENDIF
	IF(PF(3) .EQ. 1)THEN
		HEADER(I+1:I+7)= ' 2THETA'
		I=I+7
	ENDIF		
	IF(PF(4) .EQ. 1)THEN
		HEADER(I+1:I+30)=' 2THETA  OMEGA     CHI     PHI'
		I=I+30
	ENDIF		
	IF(PF(5) .EQ. 1)THEN
		HEADER(I+1:I+37)='  PSII     PSID    T(DAC)T(GAS)T(MED)'
		I=I+37
	ENDIF		
	IF(PF(6) .EQ. 1)THEN
		HEADER(I+1:I+9)='  VFACTOR'
		I=I+37
	ENDIF		
	HEADER(I+1:I+13)='  NSEQ  FLAGS'
	HLEN=LEN_TRIM(HEADER)
C
C END OF HEADER SET-UP

C
	IOUT_ERROR=0

C
C LOOP OVER INPUT DATA
C
100	CALL READ_REFLECTION(IEND)
		IF(IFATAL .EQ. 1)RETURN
	IF(IEND .EQ. 1)GOTO 400
	NREF=NREF+1		! COUNT INPUT REFLECTION
C
C SKIP REFLECTIONS MARKED AS REJECT
C
	IF(INFLAGS(2) .EQ. 'R')THEN
	  NREJ=NREJ+1
	  IF(ISKIP_REJECT .EQ. 1)GOTO 100		! SKIP REJECTED
	ENDIF  	
C
	IOUTPUT=1			!SET FLAG FOR REFLECTION TO BE OUTPUT
C		
	CALL PROCESS_INDICATOR(NSEQ)   
C
C CALCULATE ABSORPTION CORRECTIONS
C FIRST SET DEFAULT TRANSMISSION FACTORS THAT THEN ASSUME FULL TRASNMISSION
C R=THIS IS ONLY FOR SAFETY - THEY GET RESET IN ABSORB 
C	GTRNS=1.0		!GASKET
C	MEDTRNS=1.0		!MEDIA
C	DACABS=1.0		!DAC
C	TRNS=1.0		! CRYSTAL

	CALL ITOF
	IF(IFATAL .EQ. 1)RETURN
C
C
C NOW APPLY CORRECTION TO PMB AND ITS ESD
	IF(TOTALTRNS .LT. 0.001)THEN		!TOTALLY ABSORBED - OFTEN FLAGGED AS OUT OF BOUNDS
		FSQ=0.0
		FSQSIG=1.0
	ELSE
		FSQ=PMB/TOTALTRNS/SCALE
		FSQSIG=SIG/TOTALTRNS/SCALE
	ENDIF
C
C CREATE F'S - ONLY NEEDED FOR RFINE STANDARDS AND OUTPUT
	IF(FSQ .GT. 0.00001)THEN
		FO=SQRT(ABS(FSQ))
		FOSIG=FSQSIG/2./FO	
	ELSE
		FO=0.0					
		FOSIG=1.0			! ARBITRARY
	ENDIF	
C
C CHECK TTH AGAINST LIMITS
C
	IF(ABS(ANGL(1)) .LT. TTHMIN .OR. ABS(ANGL(1)) .GT. TTHMAX)THEN
	  NTTH=NTTH+1
	  F(3)='T'			! FLAG 2THETA OUTSIDE LIMITS
	  IOUTPUT=0
	ENDIF
C
C SET FLAG NO OUTPUT IF EXCEEDS DAC LIMITS
   	IF(F(3) .EQ. 'D')IOUTPUT=0
	IF(F(4) .EQ. 'O')IOUTPUT=0
C
C CHECK FOR NEGATIVE SIGMAS: HAS PRIORITY OVER NEGATIVE INTENSITY
	IF(SIG .LT. -0.0000001)THEN
		N_NEGSIG=N_NEGSIG+1
		IF(INEGSIG .EQ. -1)THEN
			IOUTPUT=0
			F(5)='S'
		ENDIF
	ENDIF
C 
C CHECK AND ACT ON NEGATIVE INPUT INTENSITIES (SOME FSQ OUTPUT MAY BE ZERO
C IF THE TRANSMISSION FACTOR IS VERY VERY SMALL
C
	IF(PMB .LT. -0.00000001)THEN
			N_NEGINT=N_NEGINT+1
			IF(INEGINT .EQ. -1)THEN
				IOUTPUT=0
				F(6)='N'
			ELSEIF(INEGINT .EQ. 0)THEN
				F(6)='Z'
				FSQ=0.00
				FSQSIG=1.0
			ENDIF				
	ENDIF
C
C  PROCESS TEST REFLECTIONS: ONLY FOR RFINE
C
      IF(ISTD.NE.0)THEN
		NUM (ISTD)=NUM(ISTD)+1
      	IF(STDMN(ISTD).GT.FO)STDMN(ISTD)=FO
      	IF(STDMX(ISTD).LT.FO)STDMX(ISTD)=FO
      	STDAV(ISTD)=STDAV(ISTD)+FO
      	STDSS(ISTD)=STDSS(ISTD)+FO**2
		STDSSS(ISTD)=STDSSS(ISTD)+FoSIG
      	F(1)='I'		! was S, changed to I 5-July-2012
		IOUTPUT=0
      ENDIF
c
c	ACCUMULATE I/SIGMA AND ALL OTHER STATS FOR NON-REJ, NON-STD 
C
C	FEB 2005: SUM WITH 2THETA AS WELL
C

	IF(IOUTPUT .EQ. 1)THEN
	SIGR=PMB/SIG
	IF(SIGR .LT. 1.0)THEN
		ISIG=1
	ELSE IF(SIGR .GT. 100.)THEN
		ISIG=12
	ELSE IF(SIGR .GT. 50.)THEN
		ISIG=11	
	ELSE IF(SIGR .GT. 40.)THEN
		ISIG=10	
	ELSE IF(SIGR .GT. 30.)THEN
		ISIG=9	
	ELSE IF(SIGR .GT. 20.)THEN
		ISIG=8	
	ELSE IF(SIGR .GT. 10.)THEN
		ISIG=7
	ELSE IF(SIGR .GT. 5.)THEN
		ISIG=6
	ELSE IF(SIGR .GT. 4.)THEN
		ISIG=5
	ELSE IF(SIGR .GT. 3.)THEN
		ISIG=4
	ELSE IF(SIGR .GT. 2.)THEN
		ISIG=3
	ELSE
		ISIG=2
	ENDIF
C CALC 2THETA BIN:
	ITH=INT(ABS(ANGL(1))/10)
	IF(ITH .LT. 1)ITH=1
	IF(ITH .GT. 10)ITH=10			
	ISIGSUM(ISIG,ITH)=ISIGSUM(ISIG,ITH)+1
C
C IF DAC, THEN ACCUMULATE SIGMA SUMS FOR PSI IN IBEAM ANVIL AND PSI IN DBEAM
C
	IF(IDAC .GT. 0)THEN
		IPSI=INT(PSII/5/RAD)-1
		IF(IID .EQ. 1)IPSI=INT(PSID/5/RAD)-1 
		IF(IPSI .LT. 1)THEN
			IPSI=1
		ELSEIF(IPSI.LT. 3)THEN
			IPSI=2
		ELSEIF(IPSI .GT. 7)THEN
			IPSI=7
		ENDIF		 
		IPSISUM(ISIG,IPSI,1)=IPSISUM(ISIG,IPSI,1)+1

		IPSI=INT(PSID/5/RAD)-1
		IF(IIA .EQ. 2)IPSI=INT(PSII/5/RAD)-1 
		IF(IPSI .LT. 1)THEN
			IPSI=1
		ELSEIF(IPSI.LT. 3)THEN
			IPSI=2
		ELSEIF(IPSI .GT. 7)THEN
			IPSI=7
		ENDIF		 
		IPSISUM(ISIG,IPSI,2)=IPSISUM(ISIG,IPSI,2)+1
	ENDIF
C 
C FLAG LESS-THANS
C
        ILT=1
	IF(PMB.LE.FACT*SIG)THEN
	   F(2)='L'
	   ILT=2
	   NLT=NLT+1
	ENDIF
C
C
C RECORD MIN/MAX VALUES OF CORRECTIONS FOR PASSED REFLECTIONS
C
	IF(IDAC .GT. 0)THEN
	  IF(DACABS .GT. DACABSMAX)DACABSMAX=DACABS
	  IF(DACABS .LT. DACABSMIN)DACABSMIN=DACABS
	ENDIF
C
C ILLUMINATION FACTOR FOR SMALL BEAM
C
	IF(ISMALL .EQ. 1)THEN
		IF(VFACTOR .LT. VFACTORMIN)VFACTORMIN=VFACTOR		!ONLY MIN REQUIRED, MAX IS 1.0
	ENDIF
C -CRYSTAL ABSN
	if(iabsco .eq. 1)then
	  if(trns .lt. trmin)trmin=trns
	  if(trns .gt. trmax)trmax=trns
	endif
C
C - GASKET TRANSMISSION & PRESSURE MEDIUM
	if(ishad .eq. 1)then
	  if(gtrns .lt. gtrans_min)gtrans_min=gtrns
	  if(gtrns .gt. gtrans_max)gtrans_max=gtrns
	  if(medtrns .lt. medtrans_min)medtrans_min=medtrns
	  if(medtrns .gt. medtrans_max)medtrans_max=medtrns
	endif
C
C INTENSITY FUNCTION
	if(totalint .lt. totalint_min)totalint_min=totalint
	if(totalint .gt. totalint_max)totalint_max=totalint
C	
C - OVERALL TRANSMISSION
	if(totaltrns .lt. totaltrns_min)totaltrns_min=totaltrns
	if(totaltrns .gt. totaltrns_max)totaltrns_max=totaltrns
C
C  - END OF IF BLOCK OVER OK REFLECTIONS
	ENDIF

C*****************************************************************
C  OUTPUT RESULTS TO PRINT FILE
C
	LINES=LINES+1
C
C  WRITE HEADER IF NECESSARY: SIX FORMATS
     	IF(LINES .LT. 54)GOTO 360
C
330	LINES=1							! RESET LINE COUNTER
	WRITE(IPRT,332)TITLE,HEADER(1:HLEN)										
332	FORMAT(//,2X,A80/A)
C
C NOW WRITE THE REFLECTION TO THE PRINT FILE: 
C
360	PSII=PSII/RAD					! RETURN PSI ANGLES TO DEGREES FOR PRINTING ONLY
	PSID=PSID/RAD
C
C
	WRITE(OUTPUT(1:12),'(3I4)')IH
	I=12
	IF(PF(1) .EQ. 1)THEN
		WRITE(OUTPUT(I+1:I+12),'(3I4)')IHQ
		I=I+12
	ENDIF
C	
	IF(TOTALTRNS .LT. 0.0001)TOTALTRNS=0.0001
	WRITE(OUTPUT(I+1:I+42),'(F10.2,F9.2,2F8.3,F6.3,1X)')FSQ,FSQSIG,BETA,
	1						1.0/TOTALTRNS,TRNS
	I=I+42
C
	IF(PF(2) .EQ. 1)THEN
		IF(TOTALINT .LT. 0.0001)TOTALINT=0.0001
		WRITE(OUTPUT(I+1:I+9),'(F9.3)')1.0/TOTALINT
		I=I+9
	ENDIF
	IF(PF(3) .EQ. 1)THEN
		WRITE(OUTPUT(I+1:I+8),'(F7.2)')ANGL(1)
		I=I+7
	ENDIF		
	IF(PF(4) .EQ. 1)THEN
		WRITE(OUTPUT(I+1:I+30),'(2F7.2,2F8.2)')ANGL
		I=I+30
	ENDIF		
	IF(PF(5) .EQ. 1)THEN
		WRITE(OUTPUT(I+1:I+36),
	1	'(F6.2,''['',I1,'']'',F6.2,''['',I1,'']'',3F6.3,1X)')  
	2	PSII,IIA,PSID,IID,DACABS,GTRNS,MEDTRNS
		I=I+37
	ENDIF		
	IF(PF(6) .EQ. 1)THEN
		WRITE(OUTPUT(I+1:I+9),'(F9.3)')VFACTOR
		I=I+9
	ENDIF

	WRITE(OUTPUT(I+1:I+12),'(I6,6A1)')NSEQ,(F(K),K=1,6)
C
C
	WRITE(IPRT,'(A)')OUTPUT(1:I+12)		! OUTPUT TO PRINT FILE
C
C******************END OF OUTPUT OF REFLECTION TO PRINT FILE
C
C 4-JULY-2012: MOVED WRITING OF SCALES FILE TO HERE SO THAT IT CONTAINS
C EVERY REFLECTION THAT WAS IN THE INPUT FILE. tTHAT MEANS ALSO REJECTED REFLECTIONS
	CALL WRITE_REFLECTION_SCALES(IOUTPUT)

C
C DO NOT WRITE REJECTED REFLECTIONS TO OUTPUT DATA FILE
C
	IF(IOUTPUT.EQ.0)GO TO 100
C
        NGT=NGT+1
C
C OUTPUT REFLECTION DATA FILE

	IF(IDFORM_out .EQ. 1)THEN			! RFINE
	  CALL DYNAMIC_FT(9,FO,IP,IERR)		!DYNAMIC DIMENSIONING OF OUTPUT
	  IF(IERR .NE. 0)GOTO 98
	  CALL DYNAMIC_FT(5,FOSIG,IS,IERR)
	  IF(IERR .NE. 0)THEN
		IS=0
		FSIG=9999.
	  ENDIF
	  WRITE(IOUT,16,ERR=390)IH,FO,FOSIG,BETA,ILT,ANGL,NSEQ
16	  FORMAT(3I3,1X,F9.<IP>,1X,F5.<IS>,F10.5,I5,5X,4F7.2,I5)
	ELSE
	  CALL DYNAMIC_FT(7,FSQ,IP,IERR)		!DYNAMIC DIMENSIONING OF OUTPUT
	  IF(IERR .NE. 0)GOTO 98
	  CALL DYNAMIC_FT(7,FSQSIG,IS,IERR)
	  IF(IERR .NE. 0)THEN
		IS=0
		FSQSIG=999999.
	  ENDIF
C
C IF PHIZERO APPLIED ON INPUT TO DCOSINES, REMOVE THE ROTATION NOW
	  IF(IDAC .GT. 0 .AND. ABS(PHIZERO) .GT. 0.1)THEN
			COSP=MATMUL(TDACPHI,COSP)			
			COSD=MATMUL(TDACPHI,COSD)
	  ENDIF
	  CALL DC_TOSHELX(DCSHELX)
C
C STUFF TO WRITE HKL FILES	
	  IF(ICFLAG .EQ. 0)THEN
		IF(IDFORM_OUT .EQ. 4)THEN
			WRITE(IOUT,3400,ERR=390)IH,FSQ,FSQSIG,NFRAME,DCSHELX,
	1				TRNS,DACABS,GTRNS,MEDTRNS	
3400			FORMAT(3I4,1X,F7.<ip>,1X,F7.<IS>,I4,6F8.5,4F6.3)
		ELSE
			WRITE(IOUT,3410,ERR=390)IH,FSQ,FSQSIG,NFRAME,DCSHELX	
3410			FORMAT(3I4,1X,F7.<ip>,1X,F7.<IS>,I4,6F8.5)
		ENDIF
	  ELSE
		IF(IDFORM_OUT .EQ. 4)THEN
			WRITE(IOUT,3420,ERR=390)IH,IHQ,FSQ,FSQSIG,NFRAME,DCSHELX,
	1				TRNS,DACABS,GTRNS,MEDTRNS	
3420			FORMAT(6I4,1X,F7.<ip>,1X,F7.<IS>,I4,6F8.5,4F6.3)
		ELSE
			WRITE(IOUT,3430,ERR=390)IH,IHQ,FSQ,FSQSIG,NFRAME,DCSHELX
3430			FORMAT(6I4,1X,F7.<ip>,1X,F7.<IS>,I4,6F8.5)
		ENDIF
	  ENDIF		
	ENDIF
C

C	
      GO TO 100
C
C HERE WHEN FORMAT OVERFLOW: SET SCALING UP BY 10
C AND REWIND AND START AGAIN
C
98	SCALE=SCALE*10.
	WRITE(ESTRING,97)
97	FORMAT(' REWINDING DATASET AND RESCALING ',
	1		'OUTPUT BY FACTOR OF 10 TO FIT FILE FORMAT')
	CALL WARNING(ESTRING)
C	WRITE(IPRT,96)
C96	FORMAT(///' *****REWINDING DATASET AND RESCALING ',
C	1		'OUTPUT TO FIT FILE FORMAT'//)
	REWIND(UNIT=IIN)
	REWIND(UNIT=IOUT)
	REWIND(UNIT=78)			! ABS_SCALES FILE
	GOTO 1
C
C HERE WHEN ERROR WRITING TO OUTPUTDATAFILE: ONLY WARNS ON FIRST OCCURANCE
390	IF(IOUT_ERROR .EQ. 0)THEN
		WRITE(ESTRING,391)
391		FORMAT(' ERROR WRITING A REFLECTION TO THE OUTPUT DATAFILE')
		CALL WARNING(ESTRING)
	ENDIF
	IOUT_ERROR=IOUT_ERROR+1
	GOTO 100
c
C *********************************************************
C  ALL DONE: FIRST PRINT EOF MARKER IF REQUIRED
C
400	IF(IDFORM_out .NE. 1)THEN
		IF(ICFLAG .EQ. 0)THEN
			WRITE(IOUT,3450)		! endline for hkl and raw
3450			FORMAT('   0   0   0    0.00    0.00')
		ELSE
			WRITE(IOUT,3451)		! endline for hkl and raw
3451			FORMAT('   0   0   0   0   0   0    0.00    0.00')
		ENDIF
	ENDIF
C
C WRITE SUMMARY 
C
	STARS='*************************'
	WRITE(IPRT,710)STARS,STARS,TITLE
    
710	FORMAT(/A25,'*** SUMMARY OF RESULTS ***',A25/
	1		'    FOR ',A80/)
C
c CALCULATE SOME SUMS
	NGT=NGT-NLT
	NSTD=0
	DO J=1,4
	  NSTD=NSTD+NUM(J)
	ENDDO
C
C PREPARATION FOR REFLECTION SUMMARY
C
	IF(ISKIP_REJECT .EQ. 0)THEN
		REJSTRING=' BUT RETAINED'
	ELSE
		REJSTRING=' AND DELETED'
	ENDIF
C
C PRINT REFLECTION SUMMARY: RECODED 23-FEB-2012
C
      WRITE(IPRT,720)NREF,NREJ,REJSTRING,NTTH,NSTD
720	  FORMAT(I7,' REFLECTIONS READ IN FROM FILE -'//
     1    I7,' REFLECTIONS FLAGGED REJECTED IN INPUT FILE',A13/
	1    I7,' REFLECTIONS REJECTED WITH 2THETA OUTSIDE LIMITS'/
	1    I7,' STANDARD REFLECTIONS')
C
C NEGATIVE SIGMAS
	IF(INEGSIG .EQ. 1)THEN
		REJSTRING=' BUT RETAINED'
	ELSE
		REJSTRING=' AND DELETED'
	ENDIF
      WRITE(IPRT,751)N_NEGSIG,REJSTRING
751	FORMAT(I7,' REFLECTIONS HAVE NEGATIVE SIGMAS IN INPUT FILE',A13)
C
C NEGATIVE INTENSITIES
	IF(INEGINT .EQ. 1)THEN
		REJSTRING=' BUT RETAINED'
	ELSEIF(INEGINT .EQ. -1)THEN
		REJSTRING=' AND DELETED'
	ELSE
		REJSTRING=' AND SET ZERO'
	ENDIF
      WRITE(IPRT,752)N_NEGINT,REJSTRING
752	FORMAT(I7,' REFLECTIONS HAVE NEGATIVE',
	1				' INTENSITIES IN INPUT FILE',A13)
C
C DAC STUFF
C
	IF(IDAC .NE. 0)THEN
          WRITE(IPRT,753)NOBSC,THRESHO,NPSIREG
753		FORMAT(
     1  I7,' REFLECTIONS OBSCURED BY GASKET (FN.ILLUM.VOL. < ',F4.2,')'/
     2  I7,' REFLECTIONS REJECTED WITH PSI OUTSIDE LIMITS')
	ENDIF
C
C GTHANS/LESSTHANS
C
      WRITE(IPRT,754)NGT,FACT,NLT,FACT
754	FORMAT(/I7,' REFLECTIONS ARE OBSERVED AT ',F4.1,' I/SIGI'/
     1  I7,' REFLECTIONS ARE UNOBSERVED AT ',F4.1,' I/SIGI')
C
C
C I/SIGMA STATS: FEB 2005 CHANGED TO A TABLE FOR 2THETA

	WRITE(IPRT,7777)
7777	FORMAT(//100('*'))
	WRITE(IPRT,725)NGT+NLT
725	FORMAT(/15X,'THE ',I6,' INPUT REFLECTIONS GROUPED',
	1' BY F^2/SIGMA(F^2) AND 2THETA'/
	115X,'      (STANDARDS AND REJECTED REFLECTIONS EXCLUDED)'/)
C
C WRITE COLUMN HEADERS OF INCREASING 2THETA
	WRITE(IPRT,731)
731	FORMAT(40X,'2THETA RANGE'/18X,'  TOTAL  0-20  20-30 30-40',
	1' 40-50 50-60 60-70 70-80 80-90 90-100 >100')
C
C LOOP OVER ROWS OF SIGMA GROUP
	DO I=1,12
		ISUMROW=0
		DO J=1,10
			ISUMROW=ISUMROW+ISIGSUM(I,J)		! SUM OF THIS SIGMA GROUP
		ENDDO
		WRITE(IPRT,721)SIGLABEL(i),ISUMROW,(ISIGSUM(I,J),J=1,10)
721		FORMAT(5X,A6,' SIGMA: ',11I6)
	ENDDO
C
C TOTALS FOR EACH 2THETA GROUP:
C
	DO J=1,10
		ISUMTH(j)=0
		DO I=1,12
			ISUMTH(J)=ISUMTH(J)+ISIGSUM(I,J)
		ENDDO
	ENDDO
	WRITE(IPRT,732)NGT+NLT,ISUMTH
732	FORMAT(/11X,'TOTALS: ',11I6)
C
C RUNNING TOTAL
C
	DO J=2,10
		ISUMTH(J)=ISUMTH(J)+ISUMTH(J-1)
	ENDDO
	WRITE(IPRT,742)ISUMTH
742	FORMAT(/6X,'CUMULATIVE TOTALS: ',10I6)

	WRITE(IPRT,7777)
C
C IF DAC PRINT TABLES FOR SIGMA STATS AS FUNCTION OF PSII AND PSID:
C
	IF(IDAC .NE. 0)THEN
		WRITE(IPRT,1725)NGT+NLT
1725		FORMAT(/15X,'THE ',I6,' INPUT REFLECTIONS GROUPED',
	1	' BY F^2/SIGMA(F^2) AND PSI IN I-BEAM ANVIL'/
	1	15X,'      (STANDARDS AND REJECTED REFLECTIONS EXCLUDED)'/)
C
C WRITE COLUMN HEADERS OF INCREASING PSI
	WRITE(IPRT,1731)
1731	FORMAT(40X,'PSI RANGE'/18X,'  TOTAL  0-10  10-20 20-25',
	1' 25-30 30-35 35-40  >40')
C
C LOOP OVER ROWS OF SIGMA GROUP
	DO I=1,12
		ISUMROW=0
		DO J=1,7
			ISUMROW=ISUMROW+IPSISUM(I,J,1)		! SUM OF THIS SIGMA GROUP
		ENDDO
		WRITE(IPRT,1721)SIGLABEL(i),ISUMROW,(IPSISUM(I,J,1),J=1,7)
1721		FORMAT(5X,A6,' SIGMA: ',8I6)
	ENDDO
C
C TOTALS FOR EACH PSI GROUP:
C
	DO J=1,7
		ISUMTH(j)=0
		DO I=1,12
			ISUMTH(J)=ISUMTH(J)+IPSISUM(I,J,1)
		ENDDO
	ENDDO
	WRITE(IPRT,732)NGT+NLT,(ISUMTH(J),J=1,7)
C
C RUNNING TOTAL
C
	DO J=2,7
		ISUMTH(J)=ISUMTH(J)+ISUMTH(J-1)
	ENDDO
	WRITE(IPRT,742)(ISUMTH(J),J=1,7)

	WRITE(IPRT,7777)
C
C THE REFLECTIONS GROUPED BY PSID:
		WRITE(IPRT,1726)NGT+NLT
1726		FORMAT(/15X,'THE ',I6,' INPUT REFLECTIONS GROUPED',
	1	' BY F^2/SIGMA(F^2) AND PSI IN D-BEAM ANVIL'/
	1	15X,'      (STANDARDS AND REJECTED REFLECTIONS EXCLUDED)'/)
C
C WRITE COLUMN HEADERS OF INCREASING PSI
	WRITE(IPRT,1731)
C
C LOOP OVER ROWS OF SIGMA GROUP
	DO I=1,12
		ISUMROW=0
		DO J=1,7
			ISUMROW=ISUMROW+IPSISUM(I,J,2)		! SUM OF THIS SIGMA GROUP
		ENDDO
		WRITE(IPRT,1721)SIGLABEL(i),ISUMROW,(IPSISUM(I,J,2),J=1,7)
	ENDDO
C
C TOTALS FOR EACH PSI GROUP:
C
	DO J=1,7
		ISUMTH(j)=0
		DO I=1,12
			ISUMTH(J)=ISUMTH(J)+IPSISUM(I,J,2)
		ENDDO
	ENDDO
	WRITE(IPRT,732)NGT+NLT,(ISUMTH(J),J=1,7)
C RUNNING TOTALS
	DO J=2,7
		ISUMTH(J)=ISUMTH(J)+ISUMTH(J-1)
	ENDDO
	WRITE(IPRT,742)(ISUMTH(J),J=1,7)
	WRITE(IPRT,7777)


	ENDIF		! END OF IF(DAC)

C
C- PRINT STANDARD STATISTICS
	JSTD=0
	DO 420 I=1,4
          IF(NUM (I).EQ.0)GO TO 420
          IF(NUM (I).EQ.1)GO TO 420
	  JSTD=JSTD+1
          STDAV(I)=STDAV(I)/NUM (I)
	  CTH=NUM(I)-1
	  STH=FLOAT(NUM(I))*STDAV(I)*STDAV(I)
	  STH=(STDSS(I)-STH)/CTH
	  IF(STH .LT. 0.00001)THEN
		STDSS(I)=0.
	  ELSE
                STDSS(I)=SQRT(STH)
	  ENDIF
	  STDSSS(I)=STDSSS(I)/NUM(I)
  420	CONTINUE
	IF(JSTD .NE. 0)THEN
 	 WRITE(IPRT,19)
	 DO 430 J=1,4
	  IF(NUM (J).EQ.0)GO TO 430
		IF(STDAV(J) .LT. 0.0001)THEN
			CTH = 0.
		ELSE
  		    CTH=SQRT(abs(STDSS(J)**2-STDSSS(J)**2))/STDAV(J)
		ENDIF
          WRITE(IPRT,18)J,NUM(J),STDAV(J),STDSS(J),STDMN(J),STDMX(J),CTH
  430    CONTINUE
	ENDIF
C

c
c write out min and max transmission factors
c
	WRITE(IPRT,723)
723	FORMAT(//5X,'SUMMARY OF DATA CORRECTIONS: '/
	143X,'TRANSMISSION FACTORS    SCALE FACTORS'/   
     243X,'    MIN       MAX       MIN       MAX')
C
C TRAP ZEROES
C
	IF(TRMIN .LT. 0.001)TRMIN=0.001
	IF(DACABSMIN .LT. 0.0001)DACABSMIN=0.001
	IF(GTRANS_MIN .LT. 0.001)GTRANS_MIN=0.001
	IF(MEDTRANS_MIN .LT. 0.001)MEDTRANS_MIN=0.001
	IF(TOTALINT_MIN .LT. 0.001)TOTALINT_MIN=0.001

	IF(IABSCO .EQ. 1)THEN
		write(IPRT,795)trmin,trmax,1.0/trmax,1.0/trmin
795		format(8X,'RANGE OF CRYSTAL TRANSMISSION:    ',4F10.3)
	ELSE
		write(iprt,796)
796		format(8X,'NO CRYSTAL TRANSMISSION CALCULATED')
	ENDIF
C
	IF(IDAC .NE. 0)THEN
		WRITE(IPRT,724)DACABSMIN,DACABSMAX,1.0/DACABSMAX,1.0/DACABSMIN
724		FORMAT(8X,'RANGE OF DAC TRANSMISSION:        ',4F10.3)
	 IF(ISHAD .EQ. 1)THEN
		WRITE(IPRT,727)gtrans_min,gtrans_max,
	1					1.0/gtrans_max,1.0/gtrans_min
727		FORMAT(8X,'RANGE OF GASKET TRANSMISSION:     ',4F10.3)
		WRITE(IPRT,728)medtrans_min,medtrans_max,
	1					1.0/medtrans_max,1.0/medtrans_min
728		FORMAT(8X,'RANGE OF MEDIA TRANSMISSION:      ',4F10.3)
c
c
	 ENDIF
	 IF(ISMALL .EQ. 1)THEN
			WRITE(IPRT,733)VFACTORMIN
733		FORMAT(8X,'RANGE OF ILLUMINATED VOLUME:      ',20X,
	1				F10.3,5X,'1.000')
	 ENDIF
	
C
	ENDIF
C
C BEAM INTENSITY STUFF
C
	if(iconfig .eq. 1)then
		WRITE(IPRT,730)1.0/TOTALINT_MAX,1.0/TOTALINT_MIN
730		FORMAT(8X,'RANGE OF INTENSITY CORRECTIONS:   ',20x,2F10.3)
	ENDIF

	WRITE(IPRT,729)totaltrns_min,totaltrns_max,
	1					1.0/totaltrns_max,1.0/totaltrns_min
729	FORMAT(8X,'RANGE OF TOTAL CORRECTIONS:       ',4F10.3)


C
C WRITE WARNING IF RESCALED: COMBINE USER AND AUTO (USER IS SCALE_i)
C
	SCALE=SCALE*SCALE_I
	IF(ABS(SCALE-1.0) .GT. 0.001)THEN
		WRITE(ESTRING,740)SCALE
740		FORMAT('INTENSITY DATA HAVE BEEN RESCALED',
	1			' BY A TOTAL FACTOR OF ',F10.4)	
		CALL WARNING(ESTRING)
	ENDIF

	WRITE(IPRT,745)STARS,STARS
745	FORMAT(/A25,11('*'),'ABSORB COMPLETED SUCCESFULLY',11('*'),A25)

	RETURN
	END
C
C
C*******************************************************************
C
	SUBROUTINE READ_REFLECTION(IEND)
C
C SUBROUTINE READS REFLECTION, CORRECTS ANGLES AND DCOSINES TO BLEVY
C
	REAL DD(6),DX(3),DZ(3)
	include 'files.inc'
	include 'reflection.inc'
	include 'unitcell.inc'
	include 'crystalmodel.inc'		! needs scale_i
	include 'dac.inc'				! needs transform matrices from phi to dac
	CHARACTER ETEXT*256,INPUTDATA*256
C

	rad=atan(1.0)/45.0

	IEND=0
C
C CLEAR FLAGS SET BY ABSORB
	DO I=1,6
		F(I)=' '
	ENDDO
c
	IF(IDFORM_IN .EQ. 1)THEN			!INT format
C 
110     READ(IIN,3,END=400,ERR=999)IH,ANGL,PMB,SIG,STH,INFLAGS,ICONT
3 	  FORMAT(3I3,2F8.4,2F8.3,F12.3,F8.3,F7.0,2X,6A1,I3)					! changed from 4F8.3 on 19 March 2012
C
C SKIP EXTRA LINES IMMEDIATELY IF PRESENT
C
	IF (ICONT .NE. 0)THEN
		DO I=1,ICONT
			READ(IIN,'(1X)',end=400,err=999)
		ENDDO
	ENDIF
C
	IF(IABS(IH(1))+IABS(IH(2))+IABS(IH(3)).EQ.0)GO TO 400	! HKL=000: BLANK LINE - read as EOF
C
C
	NSEQ=0.1*STH+0.01
	NFRAME = NSEQ				!SET NFRAME TO SEQUENCE NUMBER
	ISTD=STH-10.0*FLOAT(NSEQ)+0.1
C
C CALCULATE DIRN COSINES
C GET DIRECTION COSINES (FOR INCIDENT BEAM THESE ARE THE
C COSINES OF THE REVERSE BEAM)
C  BUSING-LEVY COORDINATE SYSTEM: 
C TAKEN DIRECT FROM EQN (58) OF BUSING & LEVY
C
C
C REVERSED INCIDENT BEAM FIRST
C
C CORRECT PARITIES OF ANGLES
	DO I=1,4
		ANGL(I)=PARITY(I)*ANGL(I)
	ENDDO
C
      THPOM=(0.5*ANGL(1)+ANGL(2))*RAD
	
      DD(1)=COS(THPOM)
      DD(2)=SIN(THPOM)
      DD(3)=COS(ANGL(3)*RAD)
      DD(4)=SIN(ANGL(3)*RAD)
      DD(5)=COS(ANGL(4)*RAD)
      DD(6)=SIN(ANGL(4)*RAD)
      COSP(1)= DD(2)*DD(3)*DD(5)+DD(1)*DD(6)
      COSP(2)= DD(2)*DD(3)*DD(6)-DD(1)*DD(5)
      COSP(3)= DD(2)*DD(4)
C
C DIFFRACTED BEAM
      THMOM=(0.5*ANGL(1)-ANGL(2))*RAD
      DD(1)=COS(THMOM)
      DD(2)=SIN(THMOM)
      COSD(1)= DD(2)*DD(3)*DD(5)-DD(1)*DD(6)
      COSD(2)= DD(2)*DD(3)*DD(6)+DD(1)*DD(5)
      COSD(3)= DD(2)*DD(4)
C
C BUILD TRANSFROM MATRIX FOR PHI-AXIS TO LAB: 
C ROWS ARE DCOSINES OF LAB AXES ON THE PHI-AXIS SYSTEM
C
C DCOSINES AT THE MOMENT ONLY FOR PHI ROTATION
		DX(1)=COS(ANGL(4)*RAD)
		DX(2)=-1.0*SIN(ANGL(4)*RAD)
		DX(3)=0.0
		DZ(1)=0.0
		DZ(2)=0.0
		DZ(3)=1.0

			DO I=1,3
				TPHILAB(1,I)=DX(I)
				TPHILAB(2,I)=-1.0*COSP(I)	!COSP IS REVERSED INCIDENT BEAM: Y(BL) IS ALONG INCIDENT BEAM
				TPHILAB(3,I)=DZ(I)
			ENDDO
		I_PHILAB=1




	ENDIF	!end of INT FILE FORMAT
C******************************************************************************************
C
C HERE FOR SHELX FORMAT WITH WIERD DIRECTION COSINES 
C  also for raw files
C
C ADDED ADDITIONAL DCOSINES FOR SPECIFYING ORIENTATION IN LAB COORDINATES, 28 MARCH 2012
	IF(IDFORM_IN .EQ. 2 .OR. IDFORM_IN .EQ. 3)THEN		
C
C NEW CODE 29 JUNE 2012 BECAUSE SOME COMPANIES PUT DIFFERENT THINGS AFTER THE FIRST NORMAL
C SET OF DCOSINES. 
C 
C FIRST ZERO ALL DCOSINES
		DD=0.
		DX=0.
		DZ=0.
C FIRST READ THE FILE IN TO A TEXT STRING
		READ(IIN,'(a)',END=400,ERR=999)INPUTDATA
C
C NOW READ THE STANDARD STUFF. THIS AREA SHOULD NOT BE OVERWRITTEN BY OTHER STUFF
		IF(ICFLAG .EQ. 0)THEN
			READ(INPUTDATA,30,END=400,ERR=999)IH,PMB,SIG,NFRAME,DD
30			FORMAT(3I4,F8.0,F8.0,I4,6F8.5)
		ELSE
			READ(INPUTDATA,31,END=400,ERR=999)IH,IHQ,PMB,SIG,NFRAME,DD			
31			FORMAT(6I4,F8.0,F8.0,I4,6F8.5)
		ENDIF
C
C NOW SEE IF THERE ARE EXTRA DCOSINES 
C IF THERE IS AN ERROR THEN THE FILE CONTAINS OTHER STUFF, NO DCOSINES TO LAB AXES
		IF(ICFLAG .EQ. 0)THEN
			READ(INPUTDATA(81:128),'(6F8.5)',END=60,ERR=60)
	2		DX(1),DZ(1),DX(2),DZ(2),DX(3),DZ(3)			
		ELSE
			READ(INPUTDATA(93:140),'(6F8.5)',END=60,ERR=60)
	2		DX(1),DZ(1),DX(2),DZ(2),DX(3),DZ(3)			
		ENDIF
C
60		ISTD=0		! THERE IS NO INDICATION FOR STANDARDS IN THIS FILE
		NSEQ=NSEQ+1						! ASSIGN A SEQUENCE NUMBER
		ICHECK=0
		DO I=1,3
			ICHECK=ICHECK+IABS(IH(I))+IABS(IHQ(I))
		ENDDO
		IF(ICHECK .EQ.0)GO TO 400	! HKL=000 AND NO IC  BLANK LINE: INTERPRET AS EOF
C
C  CHECK FOR BEAM DIRECTION COSINES PRESENT
C
		DSUM=0.
		do i=1,6
			DSUM=DSUM+DD(I)**2.
		ENDDO
		IF( DSUM .LT. 0.001)THEN
			WRITE(ETEXT,33)nseq,IH
			CALL ERROR(ETEXT)
33			FORMAT('DIRN COSINES MISSING ON ',I5,
	1		'TH REFLECTION, HKL = ',3I5) 
			RETURN
		ENDIF
C
C
C UNPACK DCOSINES AND MULTIPLY BY RECIP AXIS PARAMETERS
C 
		DO I=1,3
			COSP(I)=DD(2*I-1)*RECELL(I)
			COSD(I)=DD(2*I)*RECELL(I)
		ENDDO
C
C ROTATE COSINES TO PHI AXIS SYSTEM VIA INVERSE(TRANSPOSE(UB))
C  THE UB MATRIX WAS PLACED ON B-L AXIAL SYSTEM ON INPUT 

		COSP=MATMUL(UBTI,COSP)
		COSD=MATMUL(UBTI,COSD)
c
C  renormalise DIRN COSINES just in case....especially because some UB have
C a factor of lambda in them...!
		SUMP=0.
		SUMD=0.
		DO I=1,3
			SUMD=SUMD+COSD(I)*COSD(I)
			SUMP=SUMP+COSP(I)*COSP(I)
		ENDDO
		SUMD=SQRT(SUMD)
		SUMP=SQRT(SUMP)
		DO I=1,3
			COSP(I)=COSP(I)/SUMP
			COSD(I)=COSD(I)/SUMD
		ENDDO
C
C CALCULATE 2THETA BY DOT PRODUCT BETWEEN DIFF BEAM AND FORWARD I BEAM
		SUM=0.
		DO I=1,3
			SUM=SUM-COSP(I)*COSD(I)
		ENDDO
		ANGL(1)=ACOS(SUM)/RAD		! 2THETA IN DEGREES
C
C IF THEY ARE PRESENT.....
C NOW HANDLE THE DCOSINES FOR X AND Z OF LAB SYSTEM 
C FIRST CONVERT THEM TO DCOSINES ON THE PHI-AXIS SYSTEM:
C
		DXSQ=DOT_PRODUCT(DX,DX)
		DZSQ=DOT_PRODUCT(DZ,DZ)
		IF(DXSQ .GT. 0.0001 .AND. DZSQ .GT. 0.0001)THEN
C FIRST MULTIPLY BY RECIP AXIS PARAMETERS
C 
			DO I=1,3
				DX(I)=DX(I)*RECELL(I)
				DZ(I)=DZ(I)*RECELL(I)
			ENDDO
			DX=MATMUL(UBTI,DX)
			DZ=MATMUL(UBTI,DZ)
C
			CALL NORMALISE(DX)
			CALL NORMALISE(DZ)
C
C BUILD TRANSFROM MATRIX FOR PHI-AXIS TO LAB: 
C ROWS ARE DCOSINES OF LAB AXES ON THE PHI-AXIS SYSTEM
C

			DO I=1,3
				TPHILAB(1,I)=DX(I)
				TPHILAB(2,I)=-1.0*COSP(I)	!COSP IS REVERSED INCIDENT BEAM: Y(BL) IS ALONG INCIDENT BEAM
				TPHILAB(3,I)=DZ(I)
			ENDDO
			I_PHILAB=1						! FLAG TO SAY TRANSFORM MATRIX AVAILABLE
		ELSE
			I_PHILAB=0
		ENDIF
	ENDIF
C
C HERE WE DO THINGS FOR ALL INPUT FORMATS
C
C
C IF PHIZERO IS NOT ZERO FOR DAC THEN TRANSFORM THE DCOSINES OF THE BEAMS
C TO THE DAC COORD SYSTEM, ON WHICH THE DAC AND CRYSTAL ARE DESCRIBED:
C
	IF(IDAC .GT. 0 .AND. ABS(PHIZERO) .GT. 0.1)THEN
		COSP=MATMUL(TPHIDAC,COSP)
		COSD=MATMUL(TPHIDAC,COSD)
	ENDIF
C
C RESCALE I AND SIGMA - BOTH FORMATS
	PMB=PMB*SCALE_I
	SIG=SIG*SCALE_I

	RETURN
C
C HERE ON EOF
C
400	IEND=1
	RETURN
C
C HERE ON ERROR
999	WRITE(ETEXT,990)NSEQ
990	FORMAT('ERROR READING REFLECTION FILE AFTER REFLECTION NO.',I5)
	CALL ERROR(ETEXT)
	RETURN
	END
C
C***********************************************************************************
C
	SUBROUTINE NORMALISE(X)
	REAL X(3)
C
C GET LENGTH
C
	DSQ=DOT_PRODUCT(X,X)
	IF(DSQ .LT. 1.0E-20)RETURN		! NULL VECTOR
C NORMALISE
	D=SQRT(DSQ)
	X=X/D
	RETURN
	END


C***********************************************************************************
      SUBROUTINE ITOF
C
C IMPORTANT CHANGE 2 JULY 2002 : LP CORRECTION NOT DONE
C AUGUST 2002: ITOF NOW HANDLES ONE REFLECTION
c
	INCLUDE 'reflection.inc'
	include 'crystalmodel.inc'
	include 'DAC.inc'
	INCLUDE 'Flags.inc'
	INTEGER PSIWARN
	CHARACTER*256 TEXT
	SAVE PSIWARN
	rad=atan(1.0)/45.0
	pi=3.1415926

C
C
C IF DAC GET DAC ABSORPTION: USE DIRN COSINES TO Y-AXIS (BLEVY)
C
C NEW MODIFICATION: DEFINE PSII AND PSID POSITIVE IF BEAMS TOWARDS +X
	IF(IDAC .GT. 0)THEN
C
C  I-BEAM FIRST
C
		IF(COSP(2) .LT. 0)THEN
			PSII=ACOS(-1.0*COSP(2))	!I-BEAM IN I-BEAM ANVIL
			IIA=1
		ELSE
			PSII=ACOS(COSP(2))		! I-BEAM IN D-BEAM ANVIL
			IIA=2
		ENDIF
C
C D-BEAM
		IF(COSD(2) .GT. 0)THEN
			PSID=ACOS(COSD(2))		!D-BEAM IN D-BEAM ANVIL
			IID=2
		ELSE
			PSID=ACOS(-1.0*COSD(2)) !D-BEAM IN I-BEAM ANVIL
			IID=1
		ENDIF

C DO ABSORPTION BY CELL
C
c
c MAY 2006 TRAP AND PRINT WARNING IF PSI GREATER THAN 80 DEG
		IF(ABS(PSII) .GT. 1.22 .OR. ABS(PSID) .GT. 1.22)THEN
			DACABS=0
			IF(PSIWARN .NE. 1)THEN
				WRITE(TEXT,'('' REFLECTION WITH PSI > 70 DEG'',
	1			'' DACABS SET ZERO. CHECK DATA, UB AND BLAXES'')')
				call WARNING(TEXT)
				PSIWARN=1
			ENDIF
		ELSE
			DACABS=DIABS(PSII,IIA)*DIABS(PSID,IID)
	  		DACABS=1./DACABS
		ENDIF
	ELSE
	  DACABS=1.0			! NO DAC
	ENDIF
C
C SMALL BEAM CASE, ILLUMNATED VOLUME
C
	IF(ISMALL .EQ. 1)THEN		! VFACTOR ADDED 8-SEPT-2012
		VFACTOR=COS(PSII)
	ELSE
		VFACTOR=1.0
	ENDIF


C******************************************************************************
C
C IF OTHER TRANSMISSION COEFFICIENTS NEED TO BE APPLIED TO 
C ALL POINTS ON THE CRYSTAL MODEL, PUT THEM HERE
C
C******************************************************************************
C
C  COMPUTE ABSORPTION AND/OR SHADOWING CORRECTIONS
C
C
C  IMPORTANT - FILLED_GASKET AND SPHERE CASES ARE DIFFERENT FROM NORMAL CRYSTAL (EVEN IN DAC)
C  BECAUSE ABSORB (FOR NORMAL CRYSTALS) USES FACE EQUATIONS TO CALCULATE PATH LENGTHS
C  WHEREAS DIFFERENT LIMITS TO PATHS LENGTHS ARE USED FOR SPHERE OR FILLED GASKET
C
	IF(IMODELFORM .EQ. 0)THEN
	 TOTALTRNS=1.0					! NO MODEL LOADED
	ELSE
		IF(IMODELFORM .EQ. 4)THEN
			CALL ABSORB_SPHERE
			IF(IFATAL .EQ. 1)RETURN
		ELSEIF(IMODELFORM .EQ. 5)THEN
			CALL ABSORB_FILLG			! FILLED GASKET CASE
			IF(IFATAL .EQ. 1)RETURN
		ELSE
			CALL ABSORB
			IF(IFATAL .EQ. 1)RETURN
		ENDIF
	ENDIF
C UPDATE TOTAL TRANSMISSION
	TOTALTRNS=TOTALTRNS*DACABS/VFACTOR		! VFACTOR ADDED 8-SEPT-2012
C
C 
C  COMPUTE EXTINCTION PARAMETER
      IF(IABSCO .EQ. 0 .OR. TRNS .LT. 0.0001)THEN
           BETA=0.0
      ELSE
		STH=ABS(SIN(ANGL(1)/114.5916))
		CTH=SQRT(1.0-STH**2)
           CSTTH=CTH**2-STH**2
		IF(STH .GT. 0.0001 .AND. ABS(CTH) .GT. 0.001)THEN			! PREVENTS DIV BY ZERO WHEN 2TH=0 or 90
	           BETA=-1.58883E+3*(1.0+CSTTH**4)*VOLAM*DTRNS/
     1                              ((1.0+CSTTH**2)*TRNS*STH*CTH)
		ELSE
				BETA=0.
		ENDIF
      ENDIF
C
C
C CHECK FOR ENOUGH ILLUMINATION (IF GASKETMU = INFINITE THEN GTRNS
C IS THE FRACTIONAL VOLUME ILLUMINATED)
C
	IF(IDAC .GT. 0)THEN
C
C  CHECK FOR REFLECTION MEETING dac CONSTRAINTS
C
		IF(ABS(PSII) .GT. PSIMAX(IIA) .OR.
	1		ABS(PSID) .GT. PSIMAX(IID) )THEN
			NPSIREG=NPSIREG+1
			F(3)='D'
		ENDIF
	    IF(GTRNS .LT. THRESHO)THEN
	   		F(4)='O'
			NOBSC=NOBSC+1
		ENDIF
	ENDIF
	RETURN
	END
C
	SUBROUTINE DYNAMIC_FT(W,VAL,D,IERR)
C
C SUBROUTINE TO DETERMINE FORMAT D FOR A REAL VALUE VAL
C TO FILL FIELD OF WIDTH W....SO THAT VALUE IS WRITTEN WITH "Fw.d"
C  
	INTEGER W,D,IERR
	REAL VAL
	IERR=0
C
C LOCAL COPY OF VAL
C
	X=VAL+0.001		! EXTRA FOR SAFETY
C
C CHECK ON SIZE
C
	IF(X .GT. 0.)THEN
		XLIM=10**(W-1)-1.0		! MEANS THAT 99. CAN BE WRITTEN INTO F3.0
		INEG=0
	ELSE
		INEG=1
		XLIM=10**(W-2)-1.0		!NEGATIVE, SO NEED SPACE FOR SIGN
		X=ABS(X)
	ENDIF
	IF(X .GT. XLIM)THEN
		IERR=1
		RETURN				! NUMBER TOO BIG
	ENDIF
C
C LOOP TO FIND SIZE OF VALUE
	J=1						!START WITH "0" FOR DECIMAL POINT 
10	X=X/10.
	J=J+1
	IF(X .GT. 1.0)GOTO 10
C
	IF(INEG .EQ. 1)J=J+1
C
	D=W-J
	IF(D .LT. 0)IERR=1		! DOUBLE CHECK
	RETURN
	END
C
C
C*********************************************************************************
C
	SUBROUTINE WRITE_REFLECTION_SCALES(IOUTPUT)
	INCLUDE 'REFLECTION.INC'
	INCLUDE 'FILES.INC'
	INTEGER ISTART
	REAL MSCALE, ISCALE, ONE
	CHARACTER*512 SNAME
	SAVE ISTART
C
C WRITES THE SCALE FILE 
C


C FIRST OPEN FILE ON FIRST ENTRY
	IF(ISTART .NE. 1)THEN
C
C  OPEN FILE OUTPUT_NAME.SCALES',
C
		isunit=78
		i=index(fname(4),'.')
		sname=fname(4)(1:i)//'abs_scales'
		open(unit=isunit,file=sname,STATUS='replace',
     1		CARRIAGECONTROL='FORTRAN',ERR=999)
		ISTART = 1
	ENDIF
C
C NOW WRITE THE FILE WITH THE SCALE FACTORS
c TRANSMISSION COEFFICIENTS LESS THAN 0.001 ARE CERTAINLY MEANINGLESS, 
C SO FORMAT ACCOMODATES 9999.123 WHICH IS MORE THAN ENOUGH SPACE AND PRECISION
C
	IF(TOTALTRNS .LT. 0.001)THEN
		TOTALSCALE=9999.000
	ELSE
		TOTALSCALE=1.0/TOTALTRNS
	ENDIF
C
C SET TOTAL SCALE TO ZERO IF REJECTED REFLECTION
	IF(IOUTPUT .EQ. 0)TOTALSCALE=0.0
C
	IF(TRNS .LT. 0.001)THEN
		XSCALE=9999.000
	ELSE
		XSCALE=1.0/TRNS
	ENDIF
	IF(TOTALINT .LT. 0.001)THEN
		ISCALE=9999.000
	ELSE
		ISCALE=1.0/TOTALINT
	ENDIF
	IF(DACABS .LT. 0.001)THEN
		DSCALE=9999.000
	ELSE
		DSCALE=1.0/DACABS
	ENDIF
	IF(GTRNS .LT. 0.001)THEN
		GSCALE=9999.000
	ELSE
		GSCALE=1.0/GTRNS
	ENDIF
	IF(MEDTRNS .LT. 0.001)THEN
		MSCALE=9999.000
	ELSE
		MSCALE=1.0/MEDTRNS
	ENDIF
	ONE=1.0
C
C DYNAMIC DIMENSIONING OF OUTPUT FSQ AND SIG(FSQ)
C
	CALL DYNAMIC_FT(7,FSQ,IP,IERR)		!
	CALL DYNAMIC_FT(7,FSQSIG,IS,IERR)
	IF(IERR .NE. 0)THEN
		IS=0
		FSQSIG=999999.
	ENDIF
C
C SCALES FILE STARTS WITH HKL, FSQ, SIG(FSQ)
C
	IF(ICFLAG .EQ. 0)THEN
		WRITE(ISUNIT,100,ERR=999)IH,FSQ,FSQSIG,NFRAME,TOTALSCALE,
	1	XSCALE,DSCALE,GSCALE,MSCALE,ISCALE,ONE,VFACTOR,(F(K),K=1,6)	
100			FORMAT(3I4,1X,F7.<ip>,1X,F7.<IS>,I4,8F10.3,5X,6A1)
	ELSE
		WRITE(ISUNIT,110,ERR=999)IH,IHQ,NFRAME,TOTALSCALE,
	1	XSCALE,DSCALE,GSCALE,MSCALE,ISCALE,ONE,VFACTOR,(F(K),K=1,6)	
110			FORMAT(6I4,1X,F7.<ip>,1X,F7.<IS>,I4,8F10.3,5X,6A1)
	ENDIF

999	RETURN
	END

