C -------------------------------------------------------------
C
	SUBROUTINE SETGRID_SPHERE
C
C SUBROUTINE TO SET UP THE GAUSSIAN GRID FOR A SPHERE
C CODE TAKEN FROM ABSORB6
C REORGANISED 23 FEB 2012 RJA
C
C THE ORIGIN IS KEPT AT THE CENTER OF THE SPHERE FOR CALCULATION OF PATH LENGTH
C 
C 
	INCLUDE 'griddata.INC'
	include 'Files.inc'
	include 'crystalmodel.inc'
	INCLUDE 'Sphere.inc'
	CHARACTER*80 TEXT

c
c convert ngrid values into no. of steps along each axis
c
	  NPT(1)=NINT(2.0**NGRID(1))
	  NGRID(1)=NGRID(1)+1
C
C SET INDICATOR FOR PRINTING MIN/MAX VALUES
C
	JPRT=0
	IF(IGRID .EQ. 1 .OR. IGRID .EQ. 3)THEN
	   JPRT=1
	   WRITE(15,1)TITLE
1	   FORMAT(//10X,'GAUSSSIAN GRID LIMITS FOR ',A80)
	ENDIF
C
C COORDINATE LIMITS ARE +/- XTAL_RAD ON ALL AXES
C  SET UP GRID INTERVALS ON X
C
	
	XMIN(1)= -1.*XTAL_RAD
	XMAX(1)=XTAL_RAD
	IF(JPRT .EQ. 1)WRITE(15,501)XMIN(1),XMAX(1)
501	FORMAT(//10X,'XMIN = ',F10.4,10X,'XMAX = ',F10.4/)
	XINC = XTAL_RAD
	DO I=1,NPT(1)
	  XPT(I)= XINC*GAUSS(NGRID(1),I)
	  XW(I) = XINC*GWEIGHT(NGRID(1),I)
C
C AT THIS X VALUE FIND MIN AND MAX Y VALUES BY ALGEBRA
C
	  YMAX=SQRT(XTAL_RAD*XTAL_RAD - XPT(I)*XPT(I))
	  YMIN= -1.*YMAX
C
C GOT MIN AND MAX Y AT THIS X VALUE: SET UP Y-GRID AT THIS X
C
	IF(JPRT .EQ. 1)WRITE(15,502)XPT(I),YMIN,YMAX
502	FORMAT(/10X,'AT X = ',F10.4,' YMIN = ',F10.4,' YMAX = ',F10.4/)
	YINC = (YMAX-YMIN)/2.
	  DO J=1,NPT(1)
	      YPT(I,J)= YINC*GAUSS(NGRID(1),J)
	      YW(I,J) = YINC*GWEIGHT(NGRID(1),J)
C
C AT THESE X,Y COORDS FIND MIN AND MAX Z VALUES:
C
	      ZMAX=SQRT(YMAX*YMAX - YPT(I,J)**2.)
	      ZMIN=-1.*ZMAX
C
C GOT MIN AND MAX Z AT THIS X,Y: SET UP Z GRID AT THIS X,Y
C
	IF(JPRT .EQ. 1)WRITE(15,503)XPT(I),YPT(I,J),ZMIN,ZMAX
503	FORMAT(10X,'AT X = ',F10.4,' Y = ',F10.4,
     1             ' ZMIN = ',F10.4,' ZMAX = ',F10.4)
	      ZINC=(ZMAX-ZMIN)/2.
	      DO K=1,NPT(1)
		ZPT(I,J,K)= ZINC*GAUSS(NGRID(1),K)
	        ZW(I,J,K) = ZINC*GWEIGHT(NGRID(1),K)
	      ENDDO
	  ENDDO
	ENDDO
C
C GET CRYSTAL VOLUME: sum weights over gaussian grid
C
	IPT=NINT(NPT(1)**3.)
	XVOL=0.
	DO I=1,NPT(1)
	  SUMY=0.
	  DO J=1,NPT(1)
	    SUMZ=0.
	    DO K=1,NPT(1)
		SUMZ=SUMZ+ZW(I,J,K)
	    ENDDO
	    SUMY=SUMY+YW(I,J)*SUMZ
	  ENDDO
	  XVOL=XVOL+XW(I)*SUMY
	ENDDO
c
	IF(IGRID .GT. 1)THEN
C PRINT GRID POINT COORDINATES 
	  WRITE(15,10)TITLE
10	  format('1     COORDINATES OF GAUSSIAN GRID POINTS FOR ',A80,//
     1	  9x,'X',10x,'Y',20x,'Z COORDINATES')
c
c
	  if(npt(1) .lt. 8)then
		izpt=npt(1)
	  else
		izpt=8
	  endif
c
	  do i=1,npt(1)
	    do j=1,npt(1)
	      write(15,20)xpt(i),ypt(i,j),(zpt(i,j,k),k=1,izpt)
20	      format(2x,f10.1,',',f10.1,':',8f10.1)
	      if(npt(1) .gt. 8)write(15,30)(zpt(i,j,k),k=9,npt(1))
30		format(24x,8f10.1)
	    enddo
	  enddo
	ENDIF
C
	RETURN
	END
c
	SUBROUTINE ABSORB_SPHERE
C
C  COMPUTE ABSORPTION AND/OR SHADOWING CORRECTIONS for A SPHERE
C  USES THE GAUSSIAN GRID SET UP IN SETGRID_SPHERE
C
C SPHERE CALCULATIONS CANNOT USE THE NORMAL ABSORB ROUTINE BECAUSE
C THERE ARE NO BOUNDING PLANES!
C
C NEW SUBROUTINE 23 FEB 2012: CODE MODIFIED FROM ABSORB6 CODE
C BY REMOVING PRE-CALCULATION OF 2THETA TABLE
C AND BY ADDING IN THE HANDLING OF THE ORIGIN OFFSET....
C ...THE GRID POINTS ARE NOT OFFSET, AND HAVE ORIGIN AT CENTER OF SPHERE
C
C AND THERE IS NO LOSS IN GENERALITY BY ASSUMING THE BEAM IS INCIDENT 
C ALONG THE Z-AXIS
C 
C THE OFFSET IS ONLY APPLIED TO THE CALL FOR THE BEAM INTENSITY.
C
	INCLUDE 'reflection.inc'
	INCLUDE 'CRYSTALMODEL.INC'
	INCLUDE 'griddata.INC'
	INCLUDE 'FLAGS.INC'
	REAL XTEST(3)

	RAD=ATAN(1.0)/45.
      TRNS=0.0
	DTRNS=0.0
	TOTALTRNS=0.
	TOTALINT=0.
C
	CTTH=COS(ANGL(1)*rad)
	STTH=SIN(ANGL(1)*RAD)
C
C START LOOP OVER GRID POINTS
C
	  DO 900 I=1,NPT(1)
	    RTEMP2=XTAL_RAD**2. - XPT(I)**2.		! SQ-RADIUS OF THE SECTION AT THIS X
	    DO 899 J=1,NPT(1)
	      DO 898 K=1,NPT(1)
C
C DO CRYSTAL ABSORPTION FOR THIS POINT
C - FIND PATH FOR EACH BEAM
C
C INCIDENT BEAM: PATH ALONG THE Z AXIS
		PATHP=ZPT(I,J,K) + SQRT(RTEMP2-YPT(I,J)**2.)
C
C DIFFRACTED BEAM (CALC BY ROTATIONAL TRANSFORMATION AROUND X-AXIS)
		YPRIME=YPT(I,J)*CTTH - ZPT(I,J,K)*STTH
		ZPRIME=YPT(I,J)*STTH + ZPT(I,J,K)*CTTH
		PATHD=SQRT(RTEMP2 -YPRIME**2.) - ZPRIME
C
C GOT CRYSTAL PATH FOR THIS POINT - DO SUMS 
C
	        PATH=PATHD+PATHP
	        ABSFACT=XW(I)*YW(I,J)*ZW(I,J,K)*EXP(-1.*ABSCO*PATH)
	        DTRNS=DTRNS-PATH*ABSFACT
                TRNS=TRNS+ABSFACT

C INCIDENT BEAM FUNCTION ADDED 24 FEB 2012
C ORIGIN SHIFT MUST BE ADDED TO coords
		XTEST(1)=XPT(I)+MODEL_ORIGIN(1)
		XTEST(2)=YPT(I,J)+MODEL_ORIGIN(2)
		XTEST(3)=ZPT(I,J,K)+MODEL_ORIGIN(3)
C				
		INTFACTOR=GET_INTENSITY(XTEST)
		IF(IFATAL .EQ. 1)RETURN
		TOTALINT=TOTALINT+XW(I)*YW(I,J)*ZW(I,J,K)*INTFACTOR		!NOT EXPORT - ONLY FOR DEBUGGING
C
C
C FINAL CALCULATION FOR THIS BEAM TO THIS POINT 
C
		TOTALTRNS=TOTALTRNS+ABSFACT*INTFACTOR
C
898	      CONTINUE
899	    CONTINUE
900	  CONTINUE
C
C FINISH INTEGRALS AND STORE RESULTS
C
      trns=TRNS/XVOL
	DTRNS=DTRNS/XVOL
	TOTALTRNS=TOTALTRNS/XVOL	
	TOTALINT=TOTALINT/XVOL
C
C OTHER STUFF FOR CONSISTENCY WITH MAIN PROGRAM: gtrns was set 0. changed to 1.0 18April 2012
	GTRNS=1.
	MEDTRNS=1.0
	RETURN
	END
  